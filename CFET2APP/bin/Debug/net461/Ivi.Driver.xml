<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ivi.Driver</name>
    </assembly>
    <members>
        <member name="T:Ivi.Driver.CoercionEventArgs">
            <summary>
            Coercion event arguments.
            </summary>
        </member>
        <member name="M:Ivi.Driver.CoercionEventArgs.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="text">Coercion message.  Refer to the Text property for details.</param>
        </member>
        <member name="P:Ivi.Driver.CoercionEventArgs.Text">
            <summary>
            The coercion message.
            </summary>
            <remarks>
            The coercion record string shall contain the following information: 
            (1) The name of the property that was coerced.  This can be the generic name, the COM property name, or the C
            defined constant. 
            (2) If the property applies to a repeated capability, the name of the repeated capability. The name can be
            the specific driver repeated capability token or the virtual repeated capability name that the user specified.
            (3) The value that the user specified for the property.
            (4) The value to which the property was coerced.
            </remarks>
        </member>
        <member name="T:Ivi.Driver.Errors">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.AccessKeyRequired">
             <summary>
               Looks up a localized string similar to An access key must be provided when using machine-wide locking.
            Driver identifier: {0}.
             </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.ActualValue">
            <summary>
              Looks up a localized string similar to Actual value: .
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.AssemblyQualifiedClassName">
            <summary>
              Looks up a localized string similar to Assembly qualified class name: .
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.AutoOnceNotSupported">
            <summary>
              Looks up a localized string similar to The Auto.Once enumeration value is not supported..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.BadLockType">
             <summary>
               Looks up a localized string similar to Invalid or unsupported lock type.
            Driver identifier: {0}
            Lock type: {1}.
             </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.CannotRecover">
            <summary>
              Looks up a localized string similar to Failure - cannot recover..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.Capacity">
            <summary>
              Looks up a localized string similar to Capacity: .
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.ClassName">
            <summary>
              Looks up a localized string similar to Class name: .
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.ClassNameNotFound">
            <summary>
              Looks up a localized string similar to IviSessionFactory: The specific driver&apos;s main class (assembly qualified class name) is not specified in the configuration store..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.ConfigurationServer">
            <summary>
              Looks up a localized string similar to An error occurred while using the Configuration Server..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.ConfigurationStoreLoad">
            <summary>
              Looks up a localized string similar to IviSessionFactory: There was an error loading the Configuration Server..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.ConflictingLockRequest">
             <summary>
               Looks up a localized string similar to A machine-wide lock cannot be granted because a .NET AppDomain-wide lock for the same access key already exists.
            Driver identifier: {0}
            Access key: {1}.
             </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.DataArrayTooSmall">
            <summary>
              Looks up a localized string similar to The measured waveform or spectrum exceeds the capacity of the waveform or spectrum object&apos;s data array..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.DriverClassCreation">
            <summary>
              Looks up a localized string similar to IviSessionFactory: An instance of the specific driver referenced by the driver session name could not be created, or did not support the specified type..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.DriverSession">
            <summary>
              Looks up a localized string similar to Driver session: .
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.ErrorCode">
            <summary>
              Looks up a localized string similar to Error code: .
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.FileFormat">
            <summary>
              Looks up a localized string similar to The file does not conform to the expected file format..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.FileNotFound">
            <summary>
              Looks up a localized string similar to Unable to find the specified file..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.FileOpen">
            <summary>
              Looks up a localized string similar to The file could not be opened..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.FileUri">
            <summary>
              Looks up a localized string similar to File URI: .
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.FirstValidPointMustBePositive">
            <summary>
              Looks up a localized string similar to The firstValidPoint property must be 0 or greater..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.FirstValuePointMustBeLessThanCapacity">
            <summary>
              Looks up a localized string similar to The FirstValidPoint property must be less than the Capacity property..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.IDQueryFailed">
            <summary>
              Looks up a localized string similar to The instrument ID query failed..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.InstrumentClassNotSupported">
            <summary>
              Looks up a localized string similar to IviSessionFactory: The instrument class is not supported by the specific driver..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.InstrumentStatus">
            <summary>
              Looks up a localized string similar to Instrument error detected.  Use ErrorQuery() to determine the error(s)..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.InstrumentStatusNotAvailable">
            <summary>
              Looks up a localized string similar to The driver cannot retrieve the instrument status..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.IntervalPerPointCannotBeZero">
            <summary>
              Looks up a localized string similar to The intervalPerPoint property cannot be zero..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.InvalidClassName">
            <summary>
              Looks up a localized string similar to IviSessionFactory: The assembly qualified class name is in incorrect format.  The correct format is &quot;FullAssemblyName;NamespaceQualifiedTypeName&quot;..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.InvalidOptionValue">
            <summary>
              Looks up a localized string similar to The option string contains an invalid option value..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.InvalidSpectrumDataType">
            <summary>
              Looks up a localized string similar to The spectrum class does not support data arrays of the specified type..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.InvalidWaveformDataType">
            <summary>
              Looks up a localized string similar to The waveform class does not support data arrays of the specified type..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.IOError">
            <summary>
              Looks up a localized string similar to An instrument I/O error occurred..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.IOTimeout">
            <summary>
              Looks up a localized string similar to An I/O timeout occurred..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.IviCDriverError">
            <summary>
              Looks up a localized string similar to The call to the IVI-C driver did not succeed..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.LockAcquisitionTimeout">
            <summary>
              Looks up a localized string similar to Failed to acquire driver synchronization lock within the specified timeout period..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.MaxTimeExceeded">
            <summary>
              Looks up a localized string similar to The operation did not complete within the maximum time allowed..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.MeasuredElements">
            <summary>
              Looks up a localized string similar to Measured elements: .
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.MethodOrPropertyName">
            <summary>
              Looks up a localized string similar to Method, property, or event name: .
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.MultiplierCannotBeNanOrInf">
            <summary>
              Looks up a localized string similar to The multiplier parameter cannot be NaN or Infinity..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.MultiplierCannotBeZero">
            <summary>
              Looks up a localized string similar to The multiplier parameter cannot be zero..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.Name">
            <summary>
              Looks up a localized string similar to Logical or driver session name: .
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.NoArrayLargerThan2GBError">
            <summary>
              Looks up a localized string similar to Arrays greater in size than 2GB are not supported..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.NoConfigurationStore">
            <summary>
              Looks up a localized string similar to Error loading Configuration Store..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.NoDriverSession">
            <summary>
              Looks up a localized string similar to Logical Name references a non-existent Driver Session..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.NotATime">
            <summary>
              Looks up a localized string similar to The PrecisionDateTime value is Not a Time (NaT)..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.NotSupported">
            <summary>
              Looks up a localized string similar to The method or property is not supported..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.NotSupportedType">
            <summary>
              Looks up a localized string similar to Method is only supported for Single or Double types..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.OffsetCannotBeNanOrInf">
            <summary>
              Looks up a localized string similar to The Offset property cannot be NaN or Infinity..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.OffsetFixed">
            <summary>
              Looks up a localized string similar to The Offset property is fixed at 0 for floating point data..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.OperationPending">
            <summary>
              Looks up a localized string similar to Operation in progress..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.OptionMissing">
            <summary>
              Looks up a localized string similar to The option string is missing a required option..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.OptionName">
            <summary>
              Looks up a localized string similar to Option name: .
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.OptionStringFormat">
            <summary>
              Looks up a localized string similar to The option string is not formatted correctly..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.OptionValue">
            <summary>
              Looks up a localized string similar to Option value: .
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.OutOfRange">
            <summary>
              Looks up a localized string similar to The specified argument was out of the range of valid values..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.ParameterName">
            <summary>
              Looks up a localized string similar to Parameter name: .
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.PhysicalName">
            <summary>
              Looks up a localized string similar to Physical name: .
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.Range">
            <summary>
              Looks up a localized string similar to Allowable range: .
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.RepeatedCapability">
            <summary>
              Looks up a localized string similar to Repeated capability: .
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.RescaleNotSupported">
            <summary>
              Looks up a localized string similar to The rescale operation is not supported for floating point waveforms.
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.ResetFailed">
            <summary>
              Looks up a localized string similar to The instrument reset failed..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.ResetNotSupported">
            <summary>
              Looks up a localized string similar to The instrument does not support the reset operation..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.ResourceName">
            <summary>
              Looks up a localized string similar to Resource name: .
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.ScaleCannotBeNanOrInf">
            <summary>
              Looks up a localized string similar to The Scale property cannot be NaN or Infinity..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.ScaleCannotBeZero">
            <summary>
              Looks up a localized string similar to The Scale property cannot be zero in this context..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.ScaleFixed">
            <summary>
              Looks up a localized string similar to The Scale property is fixed at 1 for floating point data..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.SelectorFormat">
            <summary>
              Looks up a localized string similar to Invalid format for repeated capability selector..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.SelectorHierarchy">
            <summary>
              Looks up a localized string similar to The repeated capability selector has the wrong number of levels..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.SelectorName">
            <summary>
              Looks up a localized string similar to Invalid repeated capability name in selector..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.SelectorNameRequired">
            <summary>
              Looks up a localized string similar to The repeated capability selector name is required..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.SelectorRange">
            <summary>
              Looks up a localized string similar to The repeated capability selector includes an invalid range or list..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.SelectorValue">
            <summary>
              Looks up a localized string similar to Repeated capability selector value: .
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.SessionNotFound">
            <summary>
              Looks up a localized string similar to IviSessionFactory: The IVI.NET session factory method could not find a driver session that could be used to instantiate an IVI.NET instrument driver..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.SimulationState">
            <summary>
              Looks up a localized string similar to The simulation state cannot be changed..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.SoftwareModule">
            <summary>
              Looks up a localized string similar to Specific driver (software module): .
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.SoftwareModuleNotFound">
            <summary>
              Looks up a localized string similar to IviSessionFactory: The software module referenced by the driver session could not be found in the configuration store..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.StartMustEqualStopWithOnePoint">
            <summary>
              Looks up a localized string similar to The StartFrequency and StopFrequency properties must be equal when validPointCount is 1..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.StringEmpty">
            <summary>
              Looks up a localized string similar to String value cannot be the empty string..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.Timeout">
            <summary>
              Looks up a localized string similar to Timeout: .
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.TriggerNotSoftware">
            <summary>
              Looks up a localized string similar to The trigger source is not set to software trigger..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.TriggerSource">
            <summary>
              Looks up a localized string similar to Trigger source: .
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.Type">
            <summary>
              Looks up a localized string similar to Type: .
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.UnexpectedResponse">
            <summary>
              Looks up a localized string similar to The response from the instrument was unexpected..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.UnknownOption">
            <summary>
              Looks up a localized string similar to The option string contains an unknown option name..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.UnknownPhysicalName">
            <summary>
              Looks up a localized string similar to The configuration store driver session references a physical name that is not defined by the driver..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.UnknownResource">
            <summary>
              Looks up a localized string similar to Unknown resource..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.ValidPointCount">
            <summary>
              Looks up a localized string similar to Valid point count: .
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.ValidPointCountCannotBeNegative">
            <summary>
              Looks up a localized string similar to The validPointCount property must be 0 or greater..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.ValidPointCountExceedsCapacity">
            <summary>
              Looks up a localized string similar to The specified valid point count exceeds the capacity of the waveform or spectrum object&apos;s data array..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.Value">
            <summary>
              Looks up a localized string similar to Value: .
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.ValueNotSupported">
            <summary>
              Looks up a localized string similar to Value not supported..
            </summary>
        </member>
        <member name="P:Ivi.Driver.Errors.VirtualName">
            <summary>
              Looks up a localized string similar to Virtual name: .
            </summary>
        </member>
        <member name="T:Ivi.Driver.ClassNameNotFoundException">
            <summary>
            The IVI.NET session factory method could not find the assembly qualified class name in the configuration
            store.  Assembly qualified class name is a property of the IVI.NET specific driver's software module entry.
            It is needed to create an instance of the specific driver's main class.
            </summary>
            <remarks>
            <para>This error is thrown after the driver session has been found, and the software module referenced by the
            driver session has been found.  The cause of the error is either that the assembly qualified class name is
            blank, or that the program could not access the ISoftwareModule2 interface which contains the assembly
            qualified class name.</para>
            <para>If the assembly qualified class name is blank, the driver referenced by the software module is not
            an IVI.NET driver, or the driver's software module entry is corrupt.  If the driver is an IVI.NET driver,
            the problem may be fixed by repairing or reinstalling the driver.</para>
            <para>If the assembly qualified class name is not blank, the program could not access the ISoftwareModule2
            interface.  This interface was added in version 1.5.0 of the IVI Shared Components.  If a version of the
            IVI Shared Components older than version 1.5.0 is installed, the problem may be fixed by upgrading to a
            newer version.</para>
            <para>This exception shall only be thrown by IVI.NET session factory methods distributed by the IVI Foundation
            as part of the IVI.NET Shared Components.</para>
            </remarks>
        </member>
        <member name="M:Ivi.Driver.ClassNameNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.ClassNameNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.ClassNameNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and a reference to the inner 
            exception that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.ClassNameNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message with the driver session and software
            module specified.
            </summary>
            <param name="driverSession">The name of the driver session to be instantiated by the IVI.NET session factory
            method.</param>
            <param name="softwareModule">The name of the specific driver's software module referenced by the driver
            session.</param>
        </member>
        <member name="M:Ivi.Driver.ClassNameNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.ClassNameNotFoundException.DriverSession">
            <summary>
            The name of the driver session to be instantiated by the IVI.NET session factory method.
            </summary>
        </member>
        <member name="P:Ivi.Driver.ClassNameNotFoundException.SoftwareModule">
            <summary>
            The name of the specific driver's software module referenced by the driver session.
            </summary>
        </member>
        <member name="P:Ivi.Driver.ClassNameNotFoundException.Message">
            <summary>
            Create the exception message string based on the message and the stored exception parameters.
            </summary>
        </member>
        <member name="T:Ivi.Driver.ConfigurationServerException">
            <summary>
            An error occurred while using the Configuration Server.
            </summary>
            <remarks>
            This exception is used to relay an exception thrown by the configuration server (for example, an
            Unauthorized Access exception or an IO exception).  The exception thrown by the Configuration Server
            is the inner exception for this one.
            </remarks>
        </member>
        <member name="M:Ivi.Driver.ConfigurationServerException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.ConfigurationServerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.ConfigurationServerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and a reference to the inner
            exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.ConfigurationServerException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the class with a reference to the inner exception that is the cause of this
            exception.
            </summary>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.ConfigurationServerException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the class with a reference to the C/COM error code that is the cause of this
            exception.  This call should not be used to relay exceptions from a .NET configuration server or PIA.
            </summary>
            <param name="errorCode">If not equal to zero, the error code returned by an interop call to a C or COM
            configuration server that is the cause of the current exception.  If zero, the error code is ignored.</param>
        </member>
        <member name="M:Ivi.Driver.ConfigurationServerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized  object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual  information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.ConfigurationServerException.ErrorCode">
            <summary>
            Gets the error code.  If ErrorCode is 0, it is not applicable to this exception.
            </summary>
        </member>
        <member name="P:Ivi.Driver.ConfigurationServerException.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="T:Ivi.Driver.ConfigurationStoreLoadException">
            <summary>
            The IVI.NET session factory method could not load the configuration store specified.
            </summary>
            <remarks>
            <para>This error is thrown if the driver cannot load the configuration store.  The cause of the error is
            either that no file name can be found, the file specified does not exist, or the file could not be
            deserialized.</para>
            <para>The session factory method gets the configuration store file name from configuration server's process
            default location, if it is specified, or from the master location, which should always reference an extant
            configuration store file.</para>
            <para>If the file cannot be deserialized, then it does not conform to the version of the configuration store
            XML schema currently installed by the IVI Shared Components installer.</para>
            <para>This exception shall only be thrown by IVI.NET session factory methods distributed by the IVI Foundation
            as part of the IVI.NET Shared Components.</para>
            </remarks>
        </member>
        <member name="M:Ivi.Driver.ConfigurationStoreLoadException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.ConfigurationStoreLoadException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.ConfigurationStoreLoadException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error  message and a reference to the inner
            exception that is the cause  of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception,  or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.ConfigurationStoreLoadException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the class with a reference to the inner  exception that is the cause of this
            exception. 
            </summary>
            <param name="innerException">The exception that is the cause of the current exception,  or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.ConfigurationStoreLoadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.ConfigurationStoreLoadException.Message">
            <summary>
            Create the exception message string based on the message.
            </summary>
        </member>
        <member name="T:Ivi.Driver.DataArrayTooSmallException">
            <summary>
            The measured waveform or spectrum exceeds the capacity of the waveform or spectrum.
            </summary>
        </member>
        <member name="M:Ivi.Driver.DataArrayTooSmallException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.DataArrayTooSmallException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.DataArrayTooSmallException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and a reference to the inner
            exception that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.DataArrayTooSmallException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class with a specified measured number of elements and capacity. 
            </summary>
            <param name="measuredElements">The measured number of elements.</param>
            <param name="capacity">The capacity of the waveform or spectrum.</param>
        </member>
        <member name="M:Ivi.Driver.DataArrayTooSmallException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized  object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual  information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.DataArrayTooSmallException.MeasuredElements">
            <summary>
            The measured number of elements.
            </summary>
        </member>
        <member name="P:Ivi.Driver.DataArrayTooSmallException.Capacity">
            <summary>
            The capacity of the waveform or spectrum.
            </summary>
        </member>
        <member name="P:Ivi.Driver.DataArrayTooSmallException.Message">
            <summary>
            Create the exception message string based on the message and the stored exception parameters.
            </summary>
        </member>
        <member name="T:Ivi.Driver.FileFormatException">
            <summary>
            A file does not conform to it's expected format.
            </summary>
        </member>
        <member name="M:Ivi.Driver.FileFormatException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.FileFormatException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified file name and a reference to the inner exception
            that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.FileFormatException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified file name and a reference to the inner exception
            that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.FileFormatException.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the class with a specified file name. 
            </summary>
            <param name="uri">The URI of the file which is not formatted correctly.</param>
        </member>
        <member name="M:Ivi.Driver.FileFormatException.#ctor(System.Uri,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified file name  and a reference to the inner exception
            that is the cause of this exception. 
            </summary>
            <param name="uri">The URI of the file which is not formatted correctly.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.FileFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception
            being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or
            destination.</param>
        </member>
        <member name="P:Ivi.Driver.FileFormatException.Uri">
            <summary>
            The Uri of the file which is not formatted correctly.
            </summary>
        </member>
        <member name="P:Ivi.Driver.FileFormatException.Message">
            <summary>
            Create the exception message string based on the message and the stored exception parameters.
            </summary>
        </member>
        <member name="T:Ivi.Driver.IdQueryFailedException">
            <summary>
            The instrument ID query failed.
            </summary>
        </member>
        <member name="M:Ivi.Driver.IdQueryFailedException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.IdQueryFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.IdQueryFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and a reference to the inner exception
            that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.IdQueryFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized  object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual  information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.IdQueryFailedException.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="T:Ivi.Driver.InstrumentStatusException">
            <summary>
            The driver detected an instrument error.
            </summary>
        </member>
        <member name="M:Ivi.Driver.InstrumentStatusException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.InstrumentStatusException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.InstrumentStatusException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and a reference to the inner exception
            that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.InstrumentStatusException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized  object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual  information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.InstrumentStatusException.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="T:Ivi.Driver.InvalidClassNameException">
            <summary>
            The IVI.NET session factory method has determined that the specific driver's main class name (assembly
            qualified class name) is not formatted properly in the configuration store. The format is
            "FullAssemblyName;NamespaceQualifiedTypeName".
            </summary>
            <remarks>
            <para>This error is thrown after the driver session has been found, and the software module referenced by the
            driver session has been found.  The cause of the error is that the assembly qualified class name is not
            correctly formatted.</para>
            <para>Example of a correctly formatted assembly qualified class name:</para>
            <para>   "Ivi.Driver.dll, Version=1.0.0.0, Culture=neutral, PublicKeyToken=a128c98f1d7717c1, processorArchitecture=MSIL"</para>
            <para>This exception shall only be thrown by IVI.NET session factory methods distributed by the IVI Foundation
            as part of the IVI.NET Shared Components.</para>
            </remarks>
        </member>
        <member name="M:Ivi.Driver.InvalidClassNameException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.InvalidClassNameException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.InvalidClassNameException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and a reference to the inner 
            exception that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception,  or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.InvalidClassNameException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message with the software module and
            assembly qualified class name specified. 
            </summary>
            <param name="softwareModule">The name of the specific driver's software module.</param>
            <param name="assemblyQualifiedClassName">The driver's Assembly Qualified Class Name.</param>
        </member>
        <member name="M:Ivi.Driver.InvalidClassNameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized  object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual  information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.InvalidClassNameException.SoftwareModule">
            <summary>
            The name of the specific driver's software module referenced by the driver session.
            </summary>
        </member>
        <member name="P:Ivi.Driver.InvalidClassNameException.AssemblyQualifiedClassName">
            <summary>
            The driver's Assembly Qualified Class Name from the software module.
            </summary>
        </member>
        <member name="P:Ivi.Driver.InvalidClassNameException.Message">
            <summary>
            Create the exception message string based on the message and the stored exception parameters.
            </summary>
        </member>
        <member name="T:Ivi.Driver.InvalidOptionValueException">
            <summary>
            An invalid value is assigned to an option.
            </summary>
        </member>
        <member name="M:Ivi.Driver.InvalidOptionValueException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.InvalidOptionValueException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.InvalidOptionValueException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and a reference to the inner exception
            that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.InvalidOptionValueException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class with a specified option name and value. 
            </summary>
            <param name="optionName">The name of the option.</param>
            <param name="optionValue">The invalid value assigned to the option.</param>
        </member>
        <member name="M:Ivi.Driver.InvalidOptionValueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception
            being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or
            destination.</param>
        </member>
        <member name="P:Ivi.Driver.InvalidOptionValueException.OptionName">
            <summary>
            The name of the parameter to which the unsupported value is assigned.
            </summary>
        </member>
        <member name="P:Ivi.Driver.InvalidOptionValueException.OptionValue">
            <summary>
            The invalid value for the specified option.
            </summary>
        </member>
        <member name="P:Ivi.Driver.InvalidOptionValueException.Message">
            <summary>
            Create the exception message string based on the message and the stored exception parameters.
            </summary>
        </member>
        <member name="T:Ivi.Driver.InvalidSpectrumDataTypeException">
            <summary>
            The spectrum class does support data arrays of the specified type.
            </summary>
        </member>
        <member name="M:Ivi.Driver.InvalidSpectrumDataTypeException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.InvalidSpectrumDataTypeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.InvalidSpectrumDataTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and a reference to the inner exception
            that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception,  or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.InvalidSpectrumDataTypeException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message and the spectrum type. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="type">The specified spectrum type.</param>
        </member>
        <member name="M:Ivi.Driver.InvalidSpectrumDataTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.InvalidSpectrumDataTypeException.Type">
            <summary>
            The specified spectrum type.
            </summary>
        </member>
        <member name="P:Ivi.Driver.InvalidSpectrumDataTypeException.Message">
            <summary>
            Create the exception message string based on the message and the stored exception parameters.
            </summary>
        </member>
        <member name="T:Ivi.Driver.InvalidWaveformDataTypeException">
            <summary>
            The waveform class does support data arrays of the specified type.
            </summary>
        </member>
        <member name="M:Ivi.Driver.InvalidWaveformDataTypeException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.InvalidWaveformDataTypeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.InvalidWaveformDataTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and a reference to the inner exception
            that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception,  or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.InvalidWaveformDataTypeException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message and the waveform type. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="type">The specified waveform type.</param>
        </member>
        <member name="M:Ivi.Driver.InvalidWaveformDataTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.InvalidWaveformDataTypeException.Type">
            <summary>
            The specified waveform type.
            </summary>
        </member>
        <member name="P:Ivi.Driver.InvalidWaveformDataTypeException.Message">
            <summary>
            Create the exception message string based on the message and the stored exception parameters.
            </summary>
        </member>
        <member name="T:Ivi.Driver.IOException">
            <summary>
            A call to the underlying IO mechanism being used by the driver to communicate with the instrument has
            failed.
            </summary>
            <remarks>
            <para>The exception thrown by the underlying IO should be made the inner exception for this one.</para>
            <para>This exception is used to relay an exception thrown or error reported by the underlying IO mechanism
            being used by the driver to communicate with the instrument.  The exception thrown by the underlying IO
            should be made the inner exception for this one.</para>
            <para>If the underlying IO reports a timeout, IOTimeoutException is used instead.</para>
            </remarks>
        </member>
        <member name="M:Ivi.Driver.IOException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.IOException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.IOException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error 
            message and a reference to the inner exception that is the cause 
            of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.IOException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the class with a reference to the inner exception that is the cause  of this
            exception. 
            </summary>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.IOException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the class with a reference to the C/COM error code that is the cause of this
            exception.  This call should not be used to relay exceptions from a .NET I/O library or PIA.
            </summary>
            <param name="errorCode">If not equal to zero, the error code returned by an interop call to a C or COM
            I/O library that is the cause of the current exception.  If zero, the error code is ignored.</param>
        </member>
        <member name="M:Ivi.Driver.IOException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized  object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual  information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.IOException.ErrorCode">
            <summary>
            Gets the error code.  If ErrorCode is 0, it is not applicable to this exception.
            </summary>
        </member>
        <member name="P:Ivi.Driver.IOException.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="T:Ivi.Driver.IOTimeoutException">
            <summary>
            A call to the underlying IO mechanism being used by the driver to communicate with the instrument
            has timed out.
            </summary>
        </member>
        <member name="M:Ivi.Driver.IOTimeoutException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.IOTimeoutException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.IOTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and a reference to the inner exception
            that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.IOTimeoutException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message and a specified timeout. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="timeout">The timeout that was exceeded, including units.  For example, '2000 ms'.</param>
        </member>
        <member name="M:Ivi.Driver.IOTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized  object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual  information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.IOTimeoutException.Timeout">
            <summary>
            The timeout that was exceeded, including units.  For example, '2000 ms'
            </summary>
        </member>
        <member name="P:Ivi.Driver.IOTimeoutException.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="T:Ivi.Driver.IviCDriverException">
            <summary>
            An IVI-C interop action did not succeed.
            </summary>
        </member>
        <member name="M:Ivi.Driver.IviCDriverException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.IviCDriverException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.IviCDriverException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and a reference to the inner exception
            that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.IviCDriverException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the class with a specified error message and the error code of the error.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="errorCode">The error code of the error.</param>
        </member>
        <member name="M:Ivi.Driver.IviCDriverException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized  object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual  information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.IviCDriverException.ErrorCode">
            <summary>
            Gets the error code.
            </summary>
        </member>
        <member name="P:Ivi.Driver.IviCDriverException.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="T:Ivi.Driver.MaxTimeExceededException">
            <summary>
            The operation implemented by the method did not complete within the maximum time allowed.
            </summary>
            <remarks>
            This exception is used (rather than the IOTimeoutException) whenever a method includes a parameter (for
            example, maximumTime) that specifies maximum time allowed for the method's operation to complete.
            </remarks>
        </member>
        <member name="M:Ivi.Driver.MaxTimeExceededException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.MaxTimeExceededException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.MaxTimeExceededException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error 
            message and a reference to the inner exception that is the cause 
            of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.MaxTimeExceededException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="timeout">The timeout that was exceeded, including units.  For example, '2000 ms'</param>
        </member>
        <member name="M:Ivi.Driver.MaxTimeExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized  object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual  information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.MaxTimeExceededException.Timeout">
            <summary>
            The timeout that was exceeded, including units.  For example, '2000 ms'
            </summary>
        </member>
        <member name="P:Ivi.Driver.MaxTimeExceededException.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="T:Ivi.Driver.NotATimeException">
            <summary>
            The PrecisionDateTime value is Not a Time (NaT).
            </summary>
        </member>
        <member name="M:Ivi.Driver.NotATimeException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.NotATimeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.NotATimeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error 
            message and a reference to the inner exception that is the cause 
            of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.NotATimeException.#ctor(System.String,System.String)">
            <summary>
            <param name="message">The message that describes the error.</param>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="paramName">The parameter whose value is NaT (Not A Time).</param>
        </member>
        <member name="M:Ivi.Driver.NotATimeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.NotATimeException.ParameterName">
            <summary>
            The parameter whose value is NaT (Not A Time).
            </summary>
        </member>
        <member name="P:Ivi.Driver.NotATimeException.Message">
            <summary>
            Create the exception message string based on the message and the stored exception parameters.
            </summary>
        </member>
        <member name="T:Ivi.Driver.OperationNotSupportedException">
            <summary>
            This exception is used when a driver feature (for this exception, a method, property, or event) is not
            supported by the driver.
            </summary>
        </member>
        <member name="M:Ivi.Driver.OperationNotSupportedException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.OperationNotSupportedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.OperationNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and a reference to the inner exception
            that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.OperationNotSupportedException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message and a specified method, property, or
            event name. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="methodOrPropertyName">The name of the unsupported method, property, or event.</param>
        </member>
        <member name="M:Ivi.Driver.OperationNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized  object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual  information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.OperationNotSupportedException.MethodOrPropertyName">
            <summary>
            The name of the parameter to which the unsupported value is assigned.
            </summary>
        </member>
        <member name="P:Ivi.Driver.OperationNotSupportedException.Message">
            <summary>
            Create the exception message string based on the message and the stored exception parameters.
            </summary>
        </member>
        <member name="T:Ivi.Driver.OperationPendingException">
            <summary>
            An operation is in progress that prevents the current method or property from being executed.
            </summary>
        </member>
        <member name="M:Ivi.Driver.OperationPendingException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.OperationPendingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.OperationPendingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and a reference to the inner exception
            that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.OperationPendingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized  object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual  information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.OperationPendingException.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="T:Ivi.Driver.OptionMissingException">
            <summary>
            A required option is missing from the option string.
            </summary>
        </member>
        <member name="M:Ivi.Driver.OptionMissingException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.OptionMissingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.OptionMissingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and a reference to the inner exception
            that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.OptionMissingException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message and a specified option name. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="optionName">The name of the missing option.</param>
        </member>
        <member name="M:Ivi.Driver.OptionMissingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized  object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual  information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.OptionMissingException.OptionName">
            <summary>
            The name of the missing option.
            </summary>
        </member>
        <member name="P:Ivi.Driver.OptionMissingException.Message">
            <summary>
            Create the exception message string based on the message and the stored exception parameters.
            </summary>
        </member>
        <member name="T:Ivi.Driver.OptionStringFormatException">
            <summary>
            The driver cannot parse the option string.
            </summary>
        </member>
        <member name="M:Ivi.Driver.OptionStringFormatException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.OptionStringFormatException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.OptionStringFormatException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and a reference to the inner exception
            that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.OptionStringFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized  object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual  information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.OptionStringFormatException.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="T:Ivi.Driver.OutOfRangeException">
            <summary>
            Argument out-of-range.
            </summary>
        </member>
        <member name="M:Ivi.Driver.OutOfRangeException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.OutOfRangeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.OutOfRangeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and a reference to the inner exception
            that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.OutOfRangeException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="paramName">The name of the parameter to which the out of range value is assigned.</param>
            <param name="actualValue">The out of range value.</param>
            <param name="range">The allowable range.</param>
        </member>
        <member name="M:Ivi.Driver.OutOfRangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized  object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual  information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.OutOfRangeException.ParameterName">
            <summary>
            The name of the parameter to which the out of range value is assigned.
            </summary>
        </member>
        <member name="P:Ivi.Driver.OutOfRangeException.ActualValue">
            <summary>
            The out of range value.
            </summary>
        </member>
        <member name="P:Ivi.Driver.OutOfRangeException.Range">
            <summary>
            The allowable range.
            </summary>
        </member>
        <member name="P:Ivi.Driver.OutOfRangeException.Message">
            <summary>
            Create the exception message string based on the message and the stored exception parameters.
            </summary>
        </member>
        <member name="T:Ivi.Driver.ResetFailedException">
            <summary>
            The instrument reset failed.
            </summary>
        </member>
        <member name="M:Ivi.Driver.ResetFailedException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.ResetFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.ResetFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and a reference to the inner exception
            that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.ResetFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized  object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual  information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.ResetFailedException.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="T:Ivi.Driver.ResetNotSupportedException">
            <summary>
            The instrument does not support the reset operation.
            </summary>
        </member>
        <member name="M:Ivi.Driver.ResetNotSupportedException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.ResetNotSupportedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.ResetNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and a reference to the inner exception
            that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.ResetNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized  object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual  information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.ResetNotSupportedException.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="T:Ivi.Driver.SelectorFormatException">
            <summary>
            The selector is not a simple repeated capability selector, and the selector cannot be parsed.
            </summary>
            <remarks>
            <para>If a more specific exceptions is available, it will be used: SelectorNameException, 
            SelectorNameUnknownException, SelectorRangeException, SelectorHierarchyException.</para>
            <para>Since complex repeated capability selectors may not be used as indexers in IVI.NET, this exception
            should never be thrown by an indexer. If the repeated capability selector does not support complex selectors,
            use SelectorNameException.</para>
            </remarks>
        </member>
        <member name="M:Ivi.Driver.SelectorFormatException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.SelectorFormatException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified repeated capability name. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.SelectorFormatException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and a reference to the inner exception
            that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.SelectorFormatException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class with a specified repeated capability name and selector value. 
            </summary>
            <param name="repeatedCapabilityName">The name of the repeated capability (-not- the repeated capability
            instance).</param>
            <param name="selectorValue">The invalid selector value.</param>
        </member>
        <member name="M:Ivi.Driver.SelectorFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.SelectorFormatException.RepeatedCapabilityName">
            <summary>
            The name of the repeated capability (-not- the repeated capability instance).
            </summary>
        </member>
        <member name="P:Ivi.Driver.SelectorFormatException.SelectorValue">
            <summary>
            The invalid selector value.
            </summary>
        </member>
        <member name="P:Ivi.Driver.SelectorFormatException.Message">
            <summary>
            Gets the error message and the repeated capability name, or only the error message if no repeated
            capability name is set.
            </summary>
        </member>
        <member name="T:Ivi.Driver.SelectorHierarchyException">
            <summary>
            a hierarchical repeated capability selector includes an invalid number of levels in the hierarchy of
            nested identifiers.
            </summary>
            <remarks>
            <para>If the only problem is an unknown name or names in the range, the Selector Name Exception should be
            used.</para>
            <para>Since complex repeated capability selectors may not be used as indexers in IVI.NET, this exception
            should never be thrown by an indexer. If the repeated capability selector does not support complex selectors,
            use the Invalid Selector exception.</para>
            </remarks>
        </member>
        <member name="M:Ivi.Driver.SelectorHierarchyException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.SelectorHierarchyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.SelectorHierarchyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and a reference to the inner exception
            that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.SelectorHierarchyException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class with a specified repeated capability name and selector value. 
            </summary>
            <param name="repeatedCapabilityName">The name of the repeated capability (-not- the repeated capability
            instance).</param>
            <param name="selectorValue">The repeated capability selector value that contains the invalid hierarchy.</param>
        </member>
        <member name="M:Ivi.Driver.SelectorHierarchyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized  object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual  information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.SelectorHierarchyException.RepeatedCapabilityName">
            <summary>
            The name of the repeated capability (-not- the repeated capability instance).
            </summary>
        </member>
        <member name="P:Ivi.Driver.SelectorHierarchyException.SelectorValue">
            <summary>
            The repeated capability selector value that contains the invalid hierarchy.
            </summary>
        </member>
        <member name="P:Ivi.Driver.SelectorHierarchyException.Message">
            <summary>
            Create the exception message string based on the message and the stored exception parameters.
            </summary>
        </member>
        <member name="T:Ivi.Driver.SelectorNameException">
            <summary>
            A repeated capability selector is expected, but the driver does not recognize the provided name.
            </summary>
            <remarks>
            This exception should be used with any repeated capability parameter or indexer when a more specific
            exception is not appropriate.  More specific exceptions are SelectorFormatException,
            SelectorRangeException, and SelectorHierarchyException
            </remarks>
        </member>
        <member name="M:Ivi.Driver.SelectorNameException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.SelectorNameException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.SelectorNameException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and a reference to the inner exception
            that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.SelectorNameException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class with a specified repeated capability name and selector value. 
            </summary>
            <param name="repeatedCapabilityName">The name of the repeated capability (-not- the repeated capability
            instance).</param>
            <param name="selectorValue">The repeated capability selector value that contains the invalid name.</param>
        </member>
        <member name="M:Ivi.Driver.SelectorNameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized  object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual  information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.SelectorNameException.RepeatedCapabilityName">
            <summary>
            The name of the repeated capability (-not- the repeated capability instance).
            </summary>
        </member>
        <member name="P:Ivi.Driver.SelectorNameException.SelectorValue">
            <summary>
            The repeated capability selector value that contains the invalid name.
            </summary>
        </member>
        <member name="P:Ivi.Driver.SelectorNameException.Message">
            <summary>
            Create the exception message string based on the message and the stored exception parameters.
            </summary>
        </member>
        <member name="T:Ivi.Driver.SelectorNameRequiredException">
            <summary>
            The selector has more than one instance of a repeated capability, but an instance is not specified.  An empty
            string is only valid for a repeated capability selector if there is only one instance of the repeated
            capability.
            </summary>
        </member>
        <member name="M:Ivi.Driver.SelectorNameRequiredException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.SelectorNameRequiredException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.SelectorNameRequiredException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and a reference to the inner exception
            that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.SelectorNameRequiredException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message and repeated capability name. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="repeatedCapabilityName">The name of the repeated capability (-not- the repeated capability
            instance).</param>
        </member>
        <member name="M:Ivi.Driver.SelectorNameRequiredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized  object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual  information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.SelectorNameRequiredException.RepeatedCapabilityName">
            <summary>
            The name of the repeated capability (-not- the repeated capability instance).
            </summary>
        </member>
        <member name="P:Ivi.Driver.SelectorNameRequiredException.Message">
            <summary>
            Create the exception message string based on the message and the stored exception parameters.
            </summary>
        </member>
        <member name="T:Ivi.Driver.SelectorRangeException">
            <summary>
            The selector has more than one instance of a repeated capability, but an instance is not specified.  An empty
            string is only valid for a repeated capability selector if there is only one instance of the repeated
            capability.
            </summary>
            <remarks>
            <para>Since complex repeated capability selectors may not be used as indexers in IVI.NET, this exception not
            thrown by an indexer. If the repeated capability selector does not support complex selectors, the Invalid
            Selector exception is used.</para>
            <para>If there is an invalid range or list of repeated capability identifiers in a hierarchical selector that
            also has an invalid number of levels, the SelectorHierarchyException is used. If the only problem is an unknown
            name or names in the range, the SelectorNameException is used.</para>
            </remarks>
        </member>
        <member name="M:Ivi.Driver.SelectorRangeException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.SelectorRangeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.SelectorRangeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and a reference to the inner exception
            that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.SelectorRangeException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class with a specified repeated capability name and selector value. 
            </summary>
            <param name="repeatedCapabilityName">The name of the repeated capability (-not- the repeated capability
            instance).</param>
            <param name="selectorValue">The repeated capability selector value that contains the invalid range.</param>
        </member>
        <member name="M:Ivi.Driver.SelectorRangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized  object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual  information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.SelectorRangeException.RepeatedCapabilityName">
            <summary>
            The name of the repeated capability (-not- the repeated capability instance).
            </summary>
        </member>
        <member name="P:Ivi.Driver.SelectorRangeException.SelectorValue">
            <summary>
            The repeated capability selector value that contains the invalid range.
            </summary>
        </member>
        <member name="P:Ivi.Driver.SelectorRangeException.Message">
            <summary>
            Create the exception message string based on the message and the stored exception parameters.
            </summary>
        </member>
        <member name="T:Ivi.Driver.SessionNotFoundException">
            <summary>
            The IVI.NET session factory method could not find a driver session that could be used to instantiate an IVI.NET
            instrument driver.
            </summary>
            <remarks>
            <para>Name may refer to either a logical name or a physical name in the configuration store.  This error is
            thrown if the session factory method cannot find either a logical name or a driver session name that matches
            the specified name, or the logical name references a driver session name that cannot be found.</para>
            <para>This exception shall only be thrown by IVI.NET session factory methods distributed by the IVI Foundation
            as part of the IVI.NET Shared Components.</para>
            </remarks>
        </member>
        <member name="M:Ivi.Driver.SessionNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.SessionNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.SessionNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and a reference to the inner exception
            that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception,  or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.SessionNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message and the logical or driver session
            name specified. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="name">Name may refer to either a logical name or a physical name in the configuration store.</param>
        </member>
        <member name="M:Ivi.Driver.SessionNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and the logical or driver session
            name specified. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="name">Name may refer to either a logical name or a physical name in the configuration store.</param>
            <param name="innerException">The exception that is the cause of the current exception,  or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.SessionNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.SessionNotFoundException.Name">
            <summary>
            The logical name or driver session name passed to the IVI.NET session factory method.  For IVI.NET
            instrument drivers, logical names refer to driver sessions.
            </summary>
        </member>
        <member name="P:Ivi.Driver.SessionNotFoundException.Message">
            <summary>
            Create the exception message string based on the message and the stored exception parameters.
            </summary>
        </member>
        <member name="T:Ivi.Driver.SimulationStateException">
            <summary>
            The simulation property cannot be set to false, only to true.  Some drivers may not allow simulation to be
            changed at all.
            </summary>
        </member>
        <member name="M:Ivi.Driver.SimulationStateException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.SimulationStateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.SimulationStateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and a reference to the inner exception
            that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.SimulationStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized  object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual  information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.SimulationStateException.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="T:Ivi.Driver.DriverClassCreationException">
            <summary>
            An instance of the specific driver referenced by the driver session name could not be created, or did not
            support the specified type.
            </summary>
            <remarks>
            <para>This error is thrown after the driver session has been found, and the software module referenced by the
            driver session has been found.  The cause of the error is that the specific driver could not be instantiated, or
            the driver did not support the specified type.</para>
            <para>For example, the session factory specifies that the type to be returned is IviDmm, but the driver
            doesn't support the IviDmm instrument class, this exception will be thrown.</para>
            <para>This exception shall only be thrown by IVI.NET session factory methods distributed by the IVI Foundation
            as part of the IVI.NET Shared Components.</para>
            </remarks>
        </member>
        <member name="M:Ivi.Driver.DriverClassCreationException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.DriverClassCreationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.DriverClassCreationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and a reference to the inner 
            exception that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception,  or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.DriverClassCreationException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message with the software module and type. 
            </summary>
            <param name="softwareModule">The name of the specific driver's software module.</param>
            <param name="className">The class name, supported by the specific driver, that the session factory method is trying to
            return.</param>
        </member>
        <member name="M:Ivi.Driver.DriverClassCreationException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message with the software module and type. 
            </summary>
            <param name="softwareModule">The name of the specific driver's software module.</param>
            <param name="className">The class name, supported by the specific driver, that the session factory method is trying to
            return.</param>
            <param name="innerException">The exception that is the cause of the current exception,  or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.DriverClassCreationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.DriverClassCreationException.SoftwareModule">
            <summary>
            The name of the specific driver's software module referenced by the driver session.
            </summary>
        </member>
        <member name="P:Ivi.Driver.DriverClassCreationException.ClassName">
            <summary>
            The class name, supported by the specific driver, that the session factory method is trying to return.
            </summary>
        </member>
        <member name="P:Ivi.Driver.DriverClassCreationException.Message">
            <summary>
            Create the exception message string based on the message and the stored exception parameters.
            </summary>
        </member>
        <member name="T:Ivi.Driver.SoftwareModuleNotFoundException">
            <summary>
            The IVI.NET session factory method could not find the software module referenced by the driver session in the
            configuration store.
            </summary>
            <remarks>
            <para>This error is thrown after the driver session has been found.  The cause of the error is that the
            software module referenced by the driver session could not be found.</para>
            <para>In some cases, a driver session is connected to a specific driver's software module, and then that
            driver is uninstalled, removing the software module entry from the configuration store.  In this case, the
            software module reference is maintained in the driver session, but the software module itself is missing. This
            can be addressed by reinstalling the driver.</para>
            <para>This exception shall only be thrown by IVI.NET session factory methods distributed by the IVI Foundation
            as part of the IVI.NET Shared Components.</para>
            </remarks>
        </member>
        <member name="M:Ivi.Driver.SoftwareModuleNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.SoftwareModuleNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.SoftwareModuleNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and a reference to the inner 
            exception that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception,  or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.SoftwareModuleNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message with the driver session and software
            module specified.
            </summary>
            <param name="driverSession">The name of the driver session to be instantiated by the IVI.NET session factory
            method.</param>
            <param name="softwareModule">The name of the specific driver's software module referenced by the driver
            session.</param>
        </member>
        <member name="M:Ivi.Driver.SoftwareModuleNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized  object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual  information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.SoftwareModuleNotFoundException.DriverSession">
            <summary>
            The name of the driver session to be instantiated by the IVI.NET session factory method.
            </summary>
        </member>
        <member name="P:Ivi.Driver.SoftwareModuleNotFoundException.SoftwareModule">
            <summary>
            The name of the specific driver's software module referenced by the driver session.
            </summary>
        </member>
        <member name="P:Ivi.Driver.SoftwareModuleNotFoundException.Message">
            <summary>
            Create the exception message string based on the message and the stored exception parameters.
            </summary>
        </member>
        <member name="T:Ivi.Driver.TriggerNotSoftwareException">
            <summary>
            Trigger Not Software.
            </summary>
        </member>
        <member name="M:Ivi.Driver.TriggerNotSoftwareException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.TriggerNotSoftwareException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.TriggerNotSoftwareException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error 
            message and a reference to the inner exception that is the cause 
            of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.TriggerNotSoftwareException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="triggerSource">The actual trigger source.</param>
        </member>
        <member name="M:Ivi.Driver.TriggerNotSoftwareException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized  object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual  information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.TriggerNotSoftwareException.TriggerSource">
            <summary>
            The name of the actual trigger source.
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerNotSoftwareException.Message">
            <summary>
            Create the exception message string based on the message and the stored exception parameters.
            </summary>
        </member>
        <member name="T:Ivi.Driver.UnexpectedResponseException">
            <summary>
            The driver received an unexpected response from the instrument.
            </summary>
        </member>
        <member name="M:Ivi.Driver.UnexpectedResponseException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.UnexpectedResponseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.UnexpectedResponseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and a reference to the inner exception
            that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.UnexpectedResponseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized  object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual  information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.UnexpectedResponseException.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="T:Ivi.Driver.UnknownOptionException">
            <summary>
            The option string contains an option name that it does not recognize.
            </summary>
        </member>
        <member name="M:Ivi.Driver.UnknownOptionException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.UnknownOptionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified file name. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.UnknownOptionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified file name and a reference to the inner exception
            that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.UnknownOptionException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class with a specified option name. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="optionName">The unknown option name.</param>
        </member>
        <member name="M:Ivi.Driver.UnknownOptionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized  object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual  information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.UnknownOptionException.OptionName">
            <summary>
            The unknown option name.
            </summary>
        </member>
        <member name="P:Ivi.Driver.UnknownOptionException.Message">
            <summary>
            Create the exception message string based on the message and the stored exception parameters.
            </summary>
        </member>
        <member name="T:Ivi.Driver.UnknownPhysicalNameException">
            <summary>
            When establishing the map from virtual repeated capability names to physical repeated capability names, the
            physical name was not found..
            </summary>
            <remarks>
            <para>This exception also applies in cases where any member of a virtual range maps to a physical name that
            does not exist.</para>
            <para>Since the driver is required to read all relevant configuration store information in the constructor,
            this exception is only thrown by the constructor.</para>
            </remarks>
        </member>
        <member name="M:Ivi.Driver.UnknownPhysicalNameException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.UnknownPhysicalNameException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.UnknownPhysicalNameException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and a reference to the inner exception
            that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.UnknownPhysicalNameException.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the class with the data needed to identify where in the configuration store
            the unknown physical identifier is used. 
            </summary>
            <param name="driverSession">The name of the driver session in which the unknown physical name is
            referenced.</param>
            <param name="repeatedCapabilityName">The name of the repeated capability (-not- the repeated capability
            instance).</param>
            <param name="virtualName">The virtual name (defined for the repeated capability) which references the
            unknown physical name.</param>
            <param name="physicalName">The unknown physical name.</param>
        </member>
        <member name="M:Ivi.Driver.UnknownPhysicalNameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.UnknownPhysicalNameException.RepeatedCapabilityName">
            <summary>
            The name of the repeated capability (-not- the repeated capability instance).
            </summary>
        </member>
        <member name="P:Ivi.Driver.UnknownPhysicalNameException.DriverSession">
            <summary>
            The driver session that contains the unknown physical name.
            </summary>
        </member>
        <member name="P:Ivi.Driver.UnknownPhysicalNameException.VirtualName">
            <summary>
            For the specified driver session and repeated capability, the virtual name that points to the unknown
            physical name.
            </summary>
        </member>
        <member name="P:Ivi.Driver.UnknownPhysicalNameException.PhysicalName">
            <summary>
            The unknown physical name.
            </summary>
        </member>
        <member name="P:Ivi.Driver.UnknownPhysicalNameException.Message">
            <summary>
            Create the exception message string based on the message and the stored exception parameters.
            </summary>
        </member>
        <member name="T:Ivi.Driver.ValidPointCountExceedsCapacityException">
            <summary>
            Unrecoverable failure.
            </summary>
        </member>
        <member name="M:Ivi.Driver.ValidPointCountExceedsCapacityException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.ValidPointCountExceedsCapacityException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.ValidPointCountExceedsCapacityException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and a reference to the inner
            exception that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.ValidPointCountExceedsCapacityException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class with a specified actual count and capacity. 
            </summary>
            <param name="validPointCount">The valid point count specified in the waveform or spectrum configure method.</param>
            <param name="capacity">The capacity of the waveform or spectrum.</param>
        </member>
        <member name="M:Ivi.Driver.ValidPointCountExceedsCapacityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized  object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual  information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Driver.ValidPointCountExceedsCapacityException.ValidPointCount">
            <summary>
            The valid point count specified in the waveform or spectrum configure method.
            </summary>
        </member>
        <member name="P:Ivi.Driver.ValidPointCountExceedsCapacityException.Capacity">
            <summary>
            The capacity of the waveform or spectrum.
            </summary>
        </member>
        <member name="P:Ivi.Driver.ValidPointCountExceedsCapacityException.Message">
            <summary>
            Create the exception message string based on the message and the stored exception parameters.
            </summary>
        </member>
        <member name="T:Ivi.Driver.ValueNotSupportedException">
            <summary>
            An enumeration value or a discrete value from a list of defined values is not supported by the specific driver.
            </summary>
        </member>
        <member name="M:Ivi.Driver.ValueNotSupportedException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Driver.ValueNotSupportedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Driver.ValueNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and a reference to the inner exception
            that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Driver.ValueNotSupportedException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class with a specified parameter name and enumeration value. 
            </summary>
            <param name="paramName">The name of the parameter to which the unsupported value is assigned.</param>
            <param name="value">The enumeration value that is not supported.</param>
        </member>
        <member name="M:Ivi.Driver.ValueNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception
            being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or
            destination.</param>
        </member>
        <member name="P:Ivi.Driver.ValueNotSupportedException.ParameterName">
            <summary>
            The name of the parameter to which the unsupported value is assigned.
            </summary>
        </member>
        <member name="P:Ivi.Driver.ValueNotSupportedException.Value">
            <summary>
            The value that is not supported.
            </summary>
        </member>
        <member name="P:Ivi.Driver.ValueNotSupportedException.Message">
            <summary>
            Create the exception message string based on the message and the stored exception parameters.
            </summary>
        </member>
        <member name="T:Ivi.Driver.IIviDriverLock">
            <summary>
            The base interface for synchronization locks obtained on the driver session.
            </summary>
        </member>
        <member name="M:Ivi.Driver.IIviDriverLock.Unlock">
            <summary>
            Releases a driver synchronization lock.
            </summary>
        </member>
        <member name="T:Ivi.Driver.IMemorySpectrum`1">
            <summary>
            IMemorySpectrum is a template interface for an IVI.NET spectrum that provides direct access to the data array
            so it can be used where the data array is not in conventional memory.
            </summary>
            <typeparam name="T">An IVI.NET standard arithmetic type.</typeparam>
        </member>
        <member name="T:Ivi.Driver.ISpectrum`1">
            <summary>
            ISpectrum is the most basic template interface for an IVI.NET spectrum.  ISpectrum does not provide direct
            access to the data array so it can be used where the data array is not in conventional memory.  ISpectrum is
            also the basis for other spectrum types.
            </summary>
            <typeparam name="T">Int64, Int32, Int16, Byte, Single, or Double.</typeparam>
        </member>
        <member name="M:Ivi.Driver.ISpectrum`1.Configure(System.Double,System.Double,Ivi.Driver.PrecisionDateTime,System.Int64)">
            <summary>
            The Configure method fully defines the frequency (implicit) axis and number of data points in the spectrum.
            Because of the interaction between these values, they are set as a group with this method or when the
            spectrum is initially created.  If triggerTime is not specified, it defaults to NaT.  If actualCount is not
            specified, the number of elements in the spectrum is not changed.
            </summary>
            <param name="startFrequency">The frequency of the first (index 0) data point in the data array.</param>
            <param name="stopFrequency">The frequency of the final data point in the data array (that is the data point
            at index ActualCount-1).</param>
            <param name="triggerTime">The time that this measurement was triggered.</param>
            <param name="validPointCount">The actual number of elements in the spectrum.</param>
            <remarks>Ths Configure call does not change any of the explicit data in the spectrum if the extent of the
            array is not changed.  No changes to the underlying data array are made if the extent of the array is not
            changed by specifying an actualCount that is different from the array currently in the spectrum.  If the
            actualCount is specified and it is different from the current value of Actual Count, the mechanism by which
            the array is extended or contracted is driver-dependent.  Regardless, the capacity of the spectrum shall not
            change as a side effect of this method.  Classes may optimize memory use by maintaining an actualCount
            different from the capacity of the data array.  If the actualCount exceeds the data array size, an
            Insufficient Capacity Exception is thrown.</remarks>
        </member>
        <member name="M:Ivi.Driver.ISpectrum`1.Configure(System.Double,System.Double,Ivi.Driver.PrecisionDateTime)">
            <summary>
            The Configure method fully defines the frequency (implicit) axis and number of data points in the spectrum.
            Because of the interaction between these values, they are set as a group with this method or when the
            spectrum is initially created.  If triggerTime is not specified, it defaults to NaT.  If actualCount is not
            specified, the number of elements in the spectrum is not changed.
            </summary>
            <param name="startFrequency">The frequency of the first (index 0) data point in the data array.</param>
            <param name="stopFrequency">The frequency of the final data point in the data array (that is the data point
            at index ActualCount-1).</param>
            <param name="triggerTime">The time that this measurement was triggered.</param>
            <remarks>Ths Configure call does not change any of the explicit data in the spectrum.  The capacity of the
            spectrum does not change as a side effect of this method.</remarks>
        </member>
        <member name="M:Ivi.Driver.ISpectrum`1.Configure(System.Double,System.Double,System.Int64)">
            <summary>
            The Configure method fully defines the frequency (implicit) axis and number of data points in the spectrum.
            Because of the interaction between these values, they are set as a group with this method or when the
            spectrum is initially created.  If triggerTime is not specified, it defaults to NaT.  If actualCount is not
            specified, the number of elements in the spectrum is not changed.
            </summary>
            <param name="startFrequency">The frequency of the first (index 0) data point in the data array.</param>
            <param name="stopFrequency">The frequency of the final data point in the data array (that is the data point
            at index ActualCount-1).</param>
            <param name="validPointCount">The actual number of elements in the spectrum.</param>
            <remarks>Ths Configure call does not change any of the explicit data in the spectrum if the extent of the
            array is not changed.  No changes to the underlying data array are made if the extent of the array is not
            changed by specifying an actualCount that is different from the array currently in the spectrum.  If the
            actualCount is specified and it is different from the current value of Actual Count, the mechanism by which
            the array is extended or contracted is driver-dependent.  Regardless, the capacity of the spectrum shall not
            change as a side effect of this method.  Classes may optimize memory use by maintaining an actualCount
            different from the capacity of the data array.  If the actualCount exceeds the data array size, an
            Insufficient Capacity Exception is thrown.</remarks>
        </member>
        <member name="M:Ivi.Driver.ISpectrum`1.Configure(System.Double,System.Double)">
            <summary>
            The Configure method fully defines the frequency (implicit) axis and number of data points in the spectrum.
            Because of the interaction between these values, they are set as a group with this method or when the
            spectrum is initially created.  If triggerTime is not specified, it defaults to NaT.  If actualCount is not
            specified, the number of elements in the spectrum is not changed.
            </summary>
            <param name="startFrequency">The frequency of the first (index 0) data point in the data array.</param>
            <param name="stopFrequency">The frequency of the final data point in the data array (that is the data point
            at index ActualCount-1).</param>
            <remarks>Ths Configure call does not change any of the explicit data in the spectrum.  The capacity of the
            spectrum does not change as a side effect of this method.</remarks>
        </member>
        <member name="M:Ivi.Driver.ISpectrum`1.GetAllElements">
            <summary>
            GetAllElements returns a copy of the entire data array in the template data type.  Note that for scaled (that
            is, integer) types, the scaling must be applied to the returned data elements to convert them to physical
            values by the calling program.
            </summary>
            <returns>A copy of the entire data array in the template data type.</returns>
            <remarks>If the array is too large, this method may throw an Out Of Memory exception.</remarks>
        </member>
        <member name="M:Ivi.Driver.ISpectrum`1.GetElements(System.Int64,System.Int64)">
            <summary>
            GetElements returns a copy of a portion of the entire data array in the template data type, starting at the
            specified index and including the number of elements specified by count.  Note that for scaled (that
            is, integer) types, the scaling must be applied to the returned data elements to convert them to physical
            values by the calling program.
            </summary>
            <param name="index">The index in the spectrum that will be the first element in the returned array.  That is,
            element zero in the returned array is at this index in the spectrum.</param>
            <param name="count">The number of elements to be returned.</param>
            <returns>A copy of a portion of the entire data array in the template data type, starting at the specified
            index and including the number of elements specified by count.</returns>
        </member>
        <member name="M:Ivi.Driver.ISpectrum`1.GetScaled(System.Int64)">
            <summary>
            GetScaled returns one element of the data array as a Double.  If the internal data array is an integer, the
            scaling is applied to the returned value.
            </summary>
            <param name="index">The index of the data element to return.</param>
            <returns>One element of the data array as a Double.</returns>
        </member>
        <member name="M:Ivi.Driver.ISpectrum`1.GetScaled(System.Int64,System.Int64)">
            <summary>
            GetScaled returns all or part of the data array as a Double.  If the internal data array is an integer, the
            scaling is applied to the values in the returned array.
            </summary>
            <param name="index">The index of the first element in the array to return.</param>
            <param name="count">The number of data points to include in the returned array.</param>
            <returns>All or part of the data array as a Double.</returns>
        </member>
        <member name="M:Ivi.Driver.ISpectrum`1.PutElements(`0[])">
            <summary>
            PutElements sets all or part of the data array in a spectrum, starting at the element specified by index, or
            (by default, if index is not used) at the beginning of the array.  index is the first element of the spectrum
            data array to receive the new data.  If the array passed extends beyond the end of the spectrum, only
            the elements up to the length of the spectrum are copied.  The implicit axis of the spectrum is not
            changed by PutElements.
            </summary>
            <param name="data">The data to be placed into the spectrum array.</param>
        </member>
        <member name="M:Ivi.Driver.ISpectrum`1.PutElements(System.Int64,`0[])">
            <summary>
            PutElements sets all or part of the data array in a spectrum, starting at the element specified by index, or
            (by default, if index is not used) at the beginning of the array.  index is the first element of the spectrum
            data array to receive the new data.  If the array passed extends beyond the end of the spectrum, only
            the elements up to the length of the spectrum are copied.  The implicit axis of the spectrum is not
            changed by PutElements.
            </summary>
            <param name="index">The index of the first element of the data array to change.</param>
            <param name="data">The data to be placed into the spectrum array.</param>
        </member>
        <member name="P:Ivi.Driver.ISpectrum`1.Item(System.Int64)">
            <summary>
            This returns the data element at the specified index in the spectrum.  Note that for scaled (that is,
            integer) types, the scaling must be applied to the returned data element to convert it to a physical value
            by the calling program.
            </summary>
            <param name="index">The index of the data element to be returned from the waveform array.</param>
            <returns>The data element to be retuirned from the spectrum array.</returns>
        </member>
        <member name="P:Ivi.Driver.ISpectrum`1.Capacity">
            <summary>
            The number of elements that the spectrum array can store.  Note that Actual Count may be used to get the
            actual number of elements in this spectrum.
            </summary>
        </member>
        <member name="P:Ivi.Driver.ISpectrum`1.ContainsInvalidElement">
            <summary>
            True if one or more points in the spectrum array are not valid, otherwise false.
            </summary>
            <remarks>If the elements are composed of a floating point type, ContainsInvalidElement shall be true if and
            only if at least one element is set to NaN.  If the elements are not composed of floating point types,
            setting and reading ContainsInvalidElement may throw a Property Not Implemented exeption.
            </remarks>
        </member>
        <member name="P:Ivi.Driver.ISpectrum`1.ContainsOutOfRangeElement">
            <summary>
            True if one or more points in the spectrum array are out of range.  Out of range values are too large or too
            small to represent.  Numbers that are too close to zero to represent are not considered out of range.
            </summary>
            <remarks>If the elements are composed of a floating point type, ContainsOutOfRangeElement shall be true if
            and only if at least one element is set to +Inf or -Inf.  If the elements are not composed of floating point
            types, setting and reading ContainsOutOfRangeElement may throw a Property Not Implemented exeption.
            </remarks>
        </member>
        <member name="P:Ivi.Driver.ISpectrum`1.FirstValidPoint">
            <summary>
            For waveforms that contain invalid padding data at the beginning of the data array, FirstValidPoint indicates
            the first element in the data array with valid data.  If there is no padding data at the beginning of the data
            array, FirstValidPoint will be zero.
            </summary>
        </member>
        <member name="P:Ivi.Driver.ISpectrum`1.FrequencyStep">
            <summary>
            The frequency difference between subsequent points in the data array.  This value is set by the Configure
            method.
            </summary>
        </member>
        <member name="P:Ivi.Driver.ISpectrum`1.Offset">
            <summary>
            The offset to apply to scale integer values.  To convert an integer data array element to a physical value
            first it is multiplied by the scale, and then the offset is added.  If the integers in the data array do
            not have an offset, the offset property is 0.  If the contents of the data array are floating point scalars,
            the offset property is set to 0.  If the contents of the data array are some other type, the use of the offset
            is dependent on that driver and data type.
            </summary>
        </member>
        <member name="P:Ivi.Driver.ISpectrum`1.Scale">
            <summary>
            The factor to apply to scale integer values.  To convert an integer data array element to a physical value
            the element is multiplied by scale, and then the offset is added.  If the integers in the data array do not
            have an offset, the scale property is set to 1.  If the contents of the data array are floating point
            scalars, the scale property is set to 1.  If the contents of the data array are some other type, the use of
            the scale is dependent on that driver and data type.
            </summary>
        </member>
        <member name="P:Ivi.Driver.ISpectrum`1.StartFrequency">
            <summary>
            The frequency of the first (index 0) data point in the data array.  This value is set by the Configure
            method.
            </summary>
        </member>
        <member name="P:Ivi.Driver.ISpectrum`1.StopFrequency">
            <summary>
            The frequency of the final data point in the data array (that is the data point at index ActualCount-1).
            This value is set by the Configure method.
            </summary>
        </member>
        <member name="P:Ivi.Driver.ISpectrum`1.TriggerTime">
            <summary>
            The time that this measurement was triggered.   This value is set by the Configure method.
            </summary>
        </member>
        <member name="P:Ivi.Driver.ISpectrum`1.ValidPointCount">
            <summary>
            The actual number of valid elements in the waveform.  This count does not include any points occurring
            before FirstValidPoint.
            </summary>
        </member>
        <member name="P:Ivi.Driver.IMemorySpectrum`1.Data">
            <summary>
            A public, in-memory array containing elements of type T that contains the explicit spectrum data.
            Clients can use the Data property to directly access the in-memory data without copying data.
            </summary>
        </member>
        <member name="T:Ivi.Driver.IMemoryWaveform`1">
            <summary>
            IMemoryWaveform is a template interface for an IVI.NET waveform that provides direct access to the data array
            so it can be used where the data array is not in conventional memory.
            </summary>
            <typeparam name="T">An IVI.NET standard arithmetic type.</typeparam>
        </member>
        <member name="T:Ivi.Driver.IWaveform`1">
            <summary>
            IWaveform is the most basic template interface for an IVI.NET waveform.  IWaveform does not provide direct
            access to the data array so it can be used where the data array is not in conventional memory.  IWaveform is
            also the basis for other waveform types.
            </summary>
            <typeparam name="T">Int64, Int32, Int16, SByte, Byte, Single, or Double.</typeparam>
        </member>
        <member name="M:Ivi.Driver.IWaveform`1.Configure(Ivi.Driver.PrecisionTimeSpan,Ivi.Driver.PrecisionTimeSpan,System.Int64,Ivi.Driver.PrecisionDateTime)">
            <summary>
            The Configure method defines the time (implicit) axis and number of data points in the waveform.  Because of
            the interaction between these values, they are set as a group with this method or when the waveform is
            initially created.  If startTime is not specified, it defaults to Zero.  If triggerTime is not specified,
            it defaults to Not A Time.  If actualCount is not specified, the number of elements in the waveform is not changed.
            </summary>
            <param name="startTime">The time of the first data point in the waveform relative to the trigger time.</param>
            <param name="intervalPerPoint">The amount of time between data points in the waveform (required).</param>
            <param name="validPointCount">The actual number of elements in the waveform.</param>
            <param name="triggerTime">The time that this measurement was triggered.</param>
            <remarks>The Configure method does not change any of the explicit data in the Waveform.  If the actualCount
            is specified and it is different from the current value of Actual Count, the mechanism by which the array is
            extended or contracted is depends on the implemeting waveform class.  Classes may optimize memory use by
            maintaining an actualCount different from the capacity of the data array. The capacity of the waveform shall
            not change as a side effect of the Configure method.  If the actualCount exceeds the data array size, an
            Insufficient Capacity exception is thrown.
            </remarks>
        </member>
        <member name="M:Ivi.Driver.IWaveform`1.Configure(Ivi.Driver.PrecisionTimeSpan,Ivi.Driver.PrecisionTimeSpan,Ivi.Driver.PrecisionDateTime)">
            <summary>
            The Configure method defines the time (implicit) axis and number of data points in the waveform.  Because of
            the interaction between these values, they are set as a group with this method or when the waveform is
            initially created.  If startTime is not specified, it defaults to Zero.  If triggerTime is not specified,
            it defaults to Not A Time.  If actualCount is not specified, the number of elements in the waveform is not changed.
            </summary>
            <param name="startTime">The time of the first data point in the waveform relative to the trigger time.</param>
            <param name="intervalPerPoint">The amount of time between data points in the waveform (required).</param>
            <param name="triggerTime">The time that this measurement was triggered.</param>
            <remarks>The Configure method does not change any of the explicit data in the Waveform.  If the actualCount
            is specified and it is different from the current value of Actual Count, the mechanism by which the array is
            extended or contracted is depends on the implemeting waveform class.  Classes may optimize memory use by
            maintaining an actualCount different from the capacity of the data array. The capacity of the waveform shall
            not change as a side effect of the Configure method.  If the actualCount exceeds the data array size, an
            Insufficient Capacity exception is thrown.
            </remarks>
        </member>
        <member name="M:Ivi.Driver.IWaveform`1.Configure(Ivi.Driver.PrecisionTimeSpan,Ivi.Driver.PrecisionTimeSpan,System.Int64)">
            <summary>
            The Configure method defines the time (implicit) axis and number of data points in the waveform.  Because of
            the interaction between these values, they are set as a group with this method or when the waveform is
            initially created.  If startTime is not specified, it defaults to Zero.  If triggerTime is not specified,
            it defaults to Not A Time.  If actualCount is not specified, the number of elements in the waveform is not changed.
            </summary>
            <param name="startTime">The time of the first data point in the waveform relative to the trigger time.</param>
            <param name="intervalPerPoint">The amount of time between data points in the waveform (required).</param>
            <param name="validPointCount">The actual number of elements in the waveform.</param>
            <remarks>The Configure method does not change any of the explicit data in the Waveform.  If the actualCount
            is specified and it is different from the current value of Actual Count, the mechanism by which the array is
            extended or contracted is depends on the implemeting waveform class.  Classes may optimize memory use by
            maintaining an actualCount different from the capacity of the data array. The capacity of the waveform shall
            not change as a side effect of the Configure method.  If the actualCount exceeds the data array size, an
            Insufficient Capacity exception is thrown.
            </remarks>
        </member>
        <member name="M:Ivi.Driver.IWaveform`1.Configure(Ivi.Driver.PrecisionTimeSpan,Ivi.Driver.PrecisionTimeSpan)">
            <summary>
            The Configure method defines the time (implicit) axis and number of data points in the waveform.  Because of
            the interaction between these values, they are set as a group with this method or when the waveform is
            initially created.  If startTime is not specified, it defaults to Zero.  If triggerTime is not specified,
            it defaults to Not A Time.  If actualCount is not specified, the number of elements in the waveform is not changed.
            </summary>
            <param name="startTime">The time of the first data point in the waveform relative to the trigger time.</param>
            <param name="intervalPerPoint">The amount of time between data points in the waveform (required).</param>
            <remarks>The Configure method does not change any of the explicit data in the Waveform.  If the actualCount
            is specified and it is different from the current value of Actual Count, the mechanism by which the array is
            extended or contracted is depends on the implemeting waveform class.  Classes may optimize memory use by
            maintaining an actualCount different from the capacity of the data array. The capacity of the waveform shall
            not change as a side effect of the Configure method.  If the actualCount exceeds the data array size, an
            Insufficient Capacity exception is thrown.
            </remarks>
        </member>
        <member name="M:Ivi.Driver.IWaveform`1.Configure(Ivi.Driver.PrecisionTimeSpan,System.Int64)">
            <summary>
            The Configure method defines the time (implicit) axis and number of data points in the waveform.  Because of
            the interaction between these values, they are set as a group with this method or when the waveform is
            initially created.  If startTime is not specified, it defaults to Zero.  If triggerTime is not specified,
            it defaults to Not A Time.  If actualCount is not specified, the number of elements in the waveform is not changed.
            </summary>
            <param name="intervalPerPoint">The amount of time between data points in the waveform (required).</param>
            <param name="validPointCount">The actual number of elements in the waveform.</param>
            <remarks>The Configure method does not change any of the explicit data in the Waveform.  If the actualCount
            is specified and it is different from the current value of Actual Count, the mechanism by which the array is
            extended or contracted is depends on the implemeting waveform class.  Classes may optimize memory use by
            maintaining an actualCount different from the capacity of the data array. The capacity of the waveform shall
            not change as a side effect of the Configure method.  If the actualCount exceeds the data array size, an
            Insufficient Capacity exception is thrown.
            </remarks>
        </member>
        <member name="M:Ivi.Driver.IWaveform`1.Configure(Ivi.Driver.PrecisionTimeSpan)">
            <summary>
            The Configure method defines the time (implicit) axis and number of data points in the waveform.  Because of
            the interaction between these values, they are set as a group with this method or when the waveform is
            initially created.  If startTime is not specified, it defaults to Zero.  If triggerTime is not specified,
            it defaults to Not A Time.  If actualCount is not specified, the number of elements in the waveform is not changed.
            </summary>
            <param name="intervalPerPoint">The amount of time between data points in the waveform (required).</param>
            <remarks>The Configure method does not change any of the explicit data in the Waveform.  If the actualCount
            is specified and it is different from the current value of Actual Count, the mechanism by which the array is
            extended or contracted is depends on the implemeting waveform class.  Classes may optimize memory use by
            maintaining an actualCount different from the capacity of the data array. The capacity of the waveform shall
            not change as a side effect of the Configure method.  If the actualCount exceeds the data array size, an
            Insufficient Capacity exception is thrown.
            </remarks>
        </member>
        <member name="M:Ivi.Driver.IWaveform`1.GetAllElements">
            <summary>
            GetAllElements returns a copy of the entire data array in the template data type.  Note that for scaled (that
            is, integer) types, the scaling must be applied to the returned data elements to convert them to physical
            values by the calling program.
            </summary>
            <returns>A copy of the entire data array in the template data type.</returns>
            <remarks>If the array is too large, this method may throw an Out Of Memory exception.</remarks>
        </member>
        <member name="M:Ivi.Driver.IWaveform`1.GetElements(System.Int64,System.Int64)">
            <summary>
            GetElements returns a copy of a portion of the entire data array in the template data type, starting at the
            specified index and including the number of elements specified by count.  Note that for scaled (that
            is, integer) types, the scaling must be applied to the returned data elements to convert them to physical
            values by the calling program.
            </summary>
            <param name="index">The index in the Waveform that will be the first element in the returned array.  That is,
            element zero in the returned array is at this index in the Waveform.</param>
            <param name="count">The number of elements to be returned.</param>
            <returns>A copy of a portion of the entire data array in the template data type, starting at the specified
            index and including the number of elements specified by count.</returns>
        </member>
        <member name="M:Ivi.Driver.IWaveform`1.GetScaled(System.Int64)">
            <summary>
            GetScaled returns one element of the data array as a Double.  If the internal data array is an integer, the
            scaling is applied to the returned value.
            </summary>
            <param name="index">The index of the data element to return.</param>
            <returns>One element of the data array as a Double.</returns>
        </member>
        <member name="M:Ivi.Driver.IWaveform`1.GetScaled(System.Int64,System.Int64)">
            <summary>
            GetScaled returns all or part of the data array as a Double.  If the internal data array is an integer, the
            scaling is applied to the values in the returned array.
            </summary>
            <param name="index">The index of the first element in the array to return.</param>
            <param name="count">The number of data points to include in the returned array.</param>
            <returns>All or part of the data array as a Double.</returns>
        </member>
        <member name="M:Ivi.Driver.IWaveform`1.PutElements(`0[])">
            <summary>
            PutElements sets all or part of the data array in a waveform, starting at the element specified by index, or
            (by default, if index is not used) at the beginning of the array.  index is the first element of the waveform
            data array to receive the new data.  If the array passed extends beyond the end of the Waveform, only
            the elements up to the length of the waveform are copied.  The implicit axis of the waveform is not
            changed by PutElements.
            </summary>
            <param name="data">The data to be placed into the waveform array.</param>
        </member>
        <member name="M:Ivi.Driver.IWaveform`1.PutElements(System.Int64,`0[])">
            <summary>
            PutElements sets all or part of the data array in a waveform, starting at the element specified by index, or
            (by default, if index is not used) at the beginning of the array.  index is the first element of the waveform
            data array to receive the new data.  If the array passed extends beyond the end of the Waveform, only
            the elements up to the length of the waveform are copied.  The implicit axis of the waveform is not
            changed by PutElements.
            </summary>
            <param name="index">The index of the first element of the data array to change.</param>
            <param name="data">The data to be placed into the waveform array.</param>
        </member>
        <member name="M:Ivi.Driver.IWaveform`1.PutElements(System.Int64,System.ArraySegment{`0})">
            <summary>
            PutElements sets all or part of the data array in a waveform, starting at the element specified by index, or
            (by default, if index is not used) at the beginning of the array.  index is the first element of the waveform
            data array to receive the new data.  If the array passed extends beyond the end of the Waveform, only
            the elements up to the length of the waveform are copied.  The implicit axis of the waveform is not
            changed by PutElements.
            </summary>
            <param name="index">The index of the first element of the data array to change.</param>
            <param name="segment">The data to be placed into the waveform array.</param>
        </member>
        <member name="P:Ivi.Driver.IWaveform`1.Item(System.Int64)">
            <summary>
            This returns the data element at the specified index in the waveform.  Note that for scaled (that is,
            integer) types, the scaling must be applied to the returned data element to convert it to a physical value
            by the calling program.
            </summary>
            <param name="index">The index of the data element to be returned from the waveform array.</param>
            <returns>The data element to be retuirned from the waveform array.</returns>
        </member>
        <member name="P:Ivi.Driver.IWaveform`1.Capacity">
            <summary>
            The number of elements that the waveform array can store.  Note that Actual Count may be used to get the
            actual number of elements in this waveform.
            </summary>
        </member>
        <member name="P:Ivi.Driver.IWaveform`1.ContainsInvalidElement">
            <summary>
            True if one or more points in the waveform array are not valid, otherwise false.
            </summary>
            <remarks>If the elements are composed of a floating point type, ContainsInvalidElement shall be true if and
            only if at least one element is set to NaN.  If the elements are not composed of floating point types,
            setting and reading ContainsInvalidElement may throw a Property Not Implemented exeption.
            </remarks>
        </member>
        <member name="P:Ivi.Driver.IWaveform`1.ContainsOutOfRangeElement">
            <summary>
            True if one or more points in the waveform array are out of range.  Out of range values are too large or too
            small to represent.  Numbers that are too close to zero to represent are not considered out of range.
            </summary>
            <remarks>If the elements are composed of a floating point type, ContainsOutOfRangeElement shall be true if
            and only if at least one element is set to +Inf or -Inf.  If the elements are not composed of floating point
            types, setting and reading ContainsOutOfRangeElement may throw a Property Not Implemented exeption.
            </remarks>
        </member>
        <member name="P:Ivi.Driver.IWaveform`1.EndTime">
            <summary>
            The time between the last valid data point in the waveform and the TriggerTime. Positive
            values of EndTime indicate that the End Time occurred after the trigger.
            This value is set by the Configure method.
            </summary>
        </member>
        <member name="P:Ivi.Driver.IWaveform`1.FirstValidPoint">
            <summary>
            For waveforms that contain invalid padding data at the beginning of the data array, FirstValidPoint indicates
            the first element in the data array with valid data.  If there is no padding data at the beginning of the data
            array, FirstValidPoint will be zero.
            </summary>
        </member>
        <member name="P:Ivi.Driver.IWaveform`1.IntervalPerPoint">
            <summary>
            The amount of time between data points in the data array.  This value is set by the Configure method.
            </summary>
        </member>
        <member name="P:Ivi.Driver.IWaveform`1.Offset">
            <summary>
            The offset to apply to scale integer values.  To convert an integer data array element to a physical value
            first it is multiplied by the scale, and then the offset is added.  If the integers in the data array do
            not have an offset, the offset property is 0.  If the contents of the data array are floating point scalars,
            the offset property is set to 0.  If the contents of the data array are some other type, the use of the offset
            is dependent on that driver and data type.
            </summary>
        </member>
        <member name="P:Ivi.Driver.IWaveform`1.Scale">
            <summary>
            The factor to apply to scale integer values.  To convert an integer data array element to a physical value
            the element is multiplied by scale, and then the offset is added.  If the integers in the data array do not
            have an offset, the scale property is set to 1.  If the contents of the data array are floating point
            scalars, the scale property is set to 1.  If the contents of the data array are some other type, the use of
            the scale is dependent on that driver and data type.
            </summary>
        </member>
        <member name="P:Ivi.Driver.IWaveform`1.StartTime">
            <summary>
            The time between the first valid data point (that is the data point at index FirstValidPoint) in the waveform and the
            trigger.  Positive values indicate that the StartTime occurred after the trigger.
            This value is set by the Configure method.
            </summary>
        </member>
        <member name="P:Ivi.Driver.IWaveform`1.TotalTime">
            <summary>
            The timespan represented by the valid points in the waveform.  Numerically, it is equivalent to the
            IntervalPerPoint * (ValidPointCount - 1).  It is also numerically the EndTime - StartTime.
            If valid point count is 0 or 1, the value shall be zero.  This value is set by the waveform Configure method.
            </summary>
        </member>
        <member name="P:Ivi.Driver.IWaveform`1.TriggerTime">
            <summary>
            The time that this measurement was triggered.   Note that this differs from Start Time in that the trigger
            may have occurred at some time other than when the first data point was captured, as in pre-trigger or
            post-trigger applications.    This value is set by the Configure method.
            </summary>
        </member>
        <member name="P:Ivi.Driver.IWaveform`1.ValidPointCount">
            <summary>
            The actual number of valid elements in the waveform.  This count does not include any points occurring
            before FirstValidPoint.
            </summary>
        </member>
        <member name="P:Ivi.Driver.IMemoryWaveform`1.Data">
            <summary>
            A public, in-memory array containing elements of type T that contains the explicit waveform data.
            Clients can use the Data property to directly access the in-memory data without copying data.
            </summary>
        </member>
        <member name="T:Ivi.Driver.IviDriver">
            <summary>
            The purpose of the .NET Session Factory is to provide to the client 
            application a simple mechanism for creating instances of IVI.NET drivers. 
            Additionally, the activation mechanism of the 
            .NET Session Factory provides a means of interchanging IVI.NET drivers 
            without modifying the client program source code.
            </summary>
            <remarks>
            The present design of the .NET Session Factory relies on the 
            IVI Configuration Store to associate logical names or driver session names with 
            the specific drivers intended for use. The .NET Session Factory relies 
            on these mappings to resolve logical names or driver session names provided by a client 
            programmer to an assortment of initial settings provided in the 
            configuration store. Once the .NET Session Factory has instantiated a 
            driver according to the data in the configuration 
            store, then the client program communicates directly with the component, 
            with no intermediate run-time layer required to invoke methods.
            </remarks>
        </member>
        <member name="M:Ivi.Driver.IviDriver.Create(System.String)">
            <summary>   
            Creates an instance of an IVI.NET driver and returns 
            an Object Reference to the caller.  The creation process uses the 
            Configuration Server to map the provided Logical Name or Driver Session name to the .NET Type 
            of the corresponding driver.  The .NET Type used to activate the driver 
            is retrieved from the appropriate IviDriverSession entry in the 
            configuration store.
            Optionally performs a Reset and queries the instrument to 
            validate the instrument model.
            </summary>
            <param name="name">Logical Name or driver session name of the IVI.NET driver to create.</param>
            <returns>
            An IIviDriver interface reference for the specific driver that is referred to by the provided IVI
            configuration store logical name or driver session name.
            </returns>
        </member>
        <member name="M:Ivi.Driver.IviDriver.Create(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>   
            Creates an instance of an IVI.NET driver and returns 
            an Object Reference to the caller.  The creation process uses the 
            Configuration Server to map the provided Logical Name or Driver Session name to the .NET Type 
            of the corresponding driver.  The .NET Type used to activate the driver 
            is retrieved from the appropriate IviDriverSession entry in the 
            configuration store.
            Optionally performs a Reset and queries the instrument to 
            validate the instrument model.
            </summary>
            <param name="name">Logical Name or driver session name of the IVI.NET driver to create.</param>
            <param name="idQuery">Specifies whether to verify the ID of the instrument.</param>
            <param name="reset">Specifies whether to reset the instrument.</param>
            <param name="options">The user can use the OptionsString parameter to specify the initial values of 
            certain IVI inherent properties for the session. The format of an assignment in the OptionsString parameter
            is "Name=Value", 
            where Name is one of: RangeCheck, QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck,
            or DriverSetup. Value is either true or false except for DriverSetup. 
            If the Options String parameter contains an assignment for the Driver Setup property, 
            the Initialize function assumes that everything following "DriverSetup=" is part of the assignment.</param>
            <returns>
            An IIviDriver interface reference for the specific driver that is referred to by the provided IVI
            configuration store logical name or driver session name.
            </returns>
        </member>
        <member name="M:Ivi.Driver.IviDriver.Create(System.String,System.Boolean,System.Boolean,Ivi.Driver.LockType,System.String,System.String)">
            <summary>   
            Creates an instance of an IVI.NET driver and returns 
            an Object Reference to the caller.  The creation process uses the 
            Configuration Server to map the provided Logical Name or Driver Session name to the .NET Type 
            of the corresponding driver.  The .NET Type used to activate the driver 
            is retrieved from the appropriate IviDriverSession entry in the 
            configuration store.
            Optionally performs a Reset and queries the instrument to 
            validate the instrument model.
            </summary>
            <param name="name">Logical Name or driver session name of the IVI.NET driver to create.</param>
            <param name="idQuery">Specifies whether to verify the ID of the instrument.</param>
            <param name="lockType">Specifies whether to use .NET AppDomain-wide locking or machine-wide locking.</param>
            <param name="accessKey">Specifies a user-selectable access key to identify the lock.  Driver instances 
            that are created with the same accessKey will be protected from simultaneous access by multiple threads 
            within a process or across processes, depending upon the value of the lockType parameter. </param>
            <param name="reset">Specifies whether to reset the instrument.</param>
            <param name="options">The user can use the OptionsString parameter to specify the initial values of 
            certain IVI inherent properties for the session. The format of an assignment in the OptionsString parameter
            is "Name=Value", 
            where Name is one of: RangeCheck, QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck,
            or DriverSetup. Value is either true or false except for DriverSetup. 
            If the Options String parameter contains an assignment for the Driver Setup property, 
            the Initialize function assumes that everything following "DriverSetup=" is part of the assignment.</param>
            <returns>
            An IIviDriver interface reference for the specific driver that is referred to by the provided IVI
            configuration store logical name or driver session name.
            </returns>
        </member>
        <member name="M:Ivi.Driver.IviDriver.Create``1(System.String)">
            <summary>
            Creates an instance of an IVI.NET driver and returns 
            an Object Reference to the caller.  The creation process uses the 
            Configuration Server to map the provided Logical Name or Driver Session name to the .NET Type 
            of the corresponding driver.  The .NET Type used to activate the driver 
            is retrieved from the appropriate IviDriverSession entry in the 
            configuration store.
            Optionally performs a Reset and queries the instrument to 
            validate the instrument model.
            </summary>
            <typeparam name="T">The type interface to retrieve from the specific driver.  Typically, this is a root interface reference, such as IIviScope.</typeparam>
            <param name="name">Logical Name or Driver Session name of the IVI.NET driver to create.</param>
            <returns>
            An IIviDriver interface reference for the specific driver that is referred to by the provided IVI
            configuration store logical name or driver session name.
            </returns>
        </member>
        <member name="M:Ivi.Driver.IviDriver.Create``1(System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates an instance of an IVI.NET driver and returns 
            an Object Reference to the caller.  The creation process uses the 
            Configuration Server to map the provided Logical Name or Driver Session name to the .NET Type 
            of the corresponding driver.  The .NET Type used to activate the driver 
            is retrieved from the appropriate IviDriverSession entry in the 
            configuration store.
            Optionally performs a Reset and queries the instrument to 
            validate the instrument model.
            </summary>
            <typeparam name="T">The type interface to retrieve from the specific driver.  Typically, this is a root interface reference, such as IIviScope.</typeparam>
            <param name="name">Logical Name or Driver Session name of the IVI.NET driver to create.</param>
            <param name="idQuery">Specifies whether to verify the ID of the instrument.</param>
            <param name="reset">Specifies whether to reset the instrument.</param>
            <returns>
            An IIviDriver interface reference for the specific driver that is referred to by the provided IVI
            configuration store logical name or driver session name.
            </returns>
        </member>
        <member name="M:Ivi.Driver.IviDriver.Create``1(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates an instance of an IVI.NET driver and returns 
            an Object Reference to the caller.  The creation process uses the 
            Configuration Server to map the provided Logical Name or driver session name to the .NET Type 
            of the corresponding driver.  The .NET Type used to activate the driver 
            is retrieved from the appropriate IviDriverSession entry in the 
            configuration store.
            Optionally performs a Reset and queries the instrument to 
            validate the instrument model.
            </summary>
            <typeparam name="T">The type interface to retrieve from the specific driver.  Typically, this is a root interface reference, such as IIviScope.</typeparam>
            <param name="name">Logical Name or driver session name of the IVI.NET driver to create.</param>
            <param name="idQuery">Specifies whether to verify the ID of the instrument.</param>
            <param name="reset">Specifies whether to reset the instrument.</param>
            <param name="options">The user can use the OptionsString parameter to specify the initial values of 
            certain IVI inherent properties for the session. The format of an assignment in the OptionsString parameter
            is "Name=Value", 
            where Name is one of: RangeCheck, QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck,
            or DriverSetup. Value is either true or false except for DriverSetup. 
            If the Options String parameter contains an assignment for the Driver Setup property, 
            the Initialize function assumes that everything following "DriverSetup=" is part of the assignment.</param>
            <returns>
            An interface reference for the specific driver that is referred to by the provided IVI
            configuration store logical name or driver session name.
            </returns>
        </member>
        <member name="M:Ivi.Driver.IviDriver.Create``1(System.String,System.Boolean,System.Boolean,Ivi.Driver.LockType,System.String,System.String)">
            <summary>
            Creates an instance of an IVI.NET driver and returns 
            an Object Reference to the caller.  The creation process uses the 
            Configuration Server to map the provided Logical Name or driver session name to the .NET Type 
            of the corresponding driver.  The .NET Type used to activate the driver 
            is retrieved from the appropriate IviDriverSession entry in the 
            configuration store.
            Optionally performs a Reset and queries the instrument to 
            validate the instrument model.
            </summary>
            <typeparam name="T">The type interface to retrieve from the specific driver.  Typically, this is a root interface reference, such as IIviScope.</typeparam>
            <param name="name">Logical Name or driver session name of the IVI.NET driver to create.</param>
            <param name="idQuery">Specifies whether to verify the ID of the instrument.</param>
            <param name="reset">Specifies whether to reset the instrument.</param>
            <param name="lockType">Specifies whether to use .NET AppDomain-wide locking or machine-wide locking.</param>
            <param name="accessKey">Specifies a user-selectable access key to identify the lock.  Driver instances 
            that are created with the same accessKey will be protected from simultaneous access by multiple threads 
            within a process or across processes, depending upon the value of the lockType parameter. </param>
            <param name="options">The user can use the OptionsString parameter to specify the initial values of 
            certain IVI inherent properties for the session. The format of an assignment in the OptionsString parameter
            is "Name=Value", 
            where Name is one of: RangeCheck, QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck,
            or DriverSetup. Value is either true or false except for DriverSetup. 
            If the Options String parameter contains an assignment for the Driver Setup property, 
            the Initialize function assumes that everything following "DriverSetup=" is part of the assignment.</param>
            <returns>
            An interface reference for the specific driver that is referred to by the provided IVI
            configuration store logical name or driver session name.
            </returns>
        </member>
        <member name="M:Ivi.Driver.IviDriver.LoadConfigStore">
            <summary>
            Load the configuration store into memory.  It loads it from the
            process default location if it is specified, otherwise it loads 
            it from the master location.
            </summary>
            <returns>Deserialized configuration store.</returns>
        </member>
        <member name="T:Ivi.Driver.LockType">
            <summary>
            Specifies the type of synchronization lock to acquire on the driver session.
            </summary>
        </member>
        <member name="F:Ivi.Driver.LockType.AppDomain">
            <summary>
            The lock protects simultaneous access to the driver session amongst multiple threads within the same .NET AppDomain.
            </summary>
        </member>
        <member name="F:Ivi.Driver.LockType.Machine">
            <summary>
            The lock protects simultaneous access to the driver session amongst multiple threads within a process,
            as well as amongst multiple processes.
            </summary>
        </member>
        <member name="T:Ivi.Driver.LockManager">
            <summary>
            The LockManager class is used by driver developers to implement multithread safety.  Driver implementation code internally creates
            a single instance of this class and uses it to acquire a lock for the duration of individual method calls.  The LockManager class 
            is also used by driver developers to implement the IIviDriverUtility.Lock method.
            </summary>
        </member>
        <member name="M:Ivi.Driver.LockManager.#ctor(Ivi.Driver.IIviDriver,Ivi.Driver.LockType,System.String)">
            <summary>
            Creates an instance of the LockManager.  The LockManager should be instantiated within the driver constructor and only a 
            single instance of the LockManager should be instantiated for a particular driver instance.  The constructor of the LockManager
            automatically determines what type of lock (.NET AppDomain-wide or machine-wide) will be created based upon the requested lock type
            and access key as well as other driver instances that have already been created with the same access key.
            </summary>
            <param name="driver">A reference to the driver that is using the LockManager.</param>
            <param name="requestedLockType">The type of lock to create.  Note that the actual type created can differ.  See IVI-3.2 for details.</param>
            <param name="accessKey">A user-specified access key.</param>
        </member>
        <member name="M:Ivi.Driver.LockManager.Lock">
            <summary>
            This method is used to implement the IIviDriverUtility.Lock method.  Driver implementations should directly delegate
            to this method from their implementation of IIviDriverUtility.  The calling code is blocked until the lock is acquired.
            </summary>
            <returns>An instance of a class that holds the lock and will release it upon a call to IIviDriverLock.Unlock.</returns>
        </member>
        <member name="M:Ivi.Driver.LockManager.Lock(Ivi.Driver.PrecisionTimeSpan)">
            <summary>
            This method is used to implement the IIviDriverUtility.Lock method.  Driver implementations should directly delegate
            to this method from their implementation of IIviDriverUtility.  The calling code is blocked until the lock is acquired.
            </summary>
            <param name="maximumTime">The maximum amount of time to wait to acquire the lock.  An exception is thrown if the
            lock cannot be acquired within the time limit specified.</param>
            <returns>An instance of a class that holds the lock and will release it upon a call to IIviDriverLock.Unlock.</returns>
        </member>
        <member name="M:Ivi.Driver.LockManager.Dispose">
            <summary>
            Disposes of the LockManager class.  This method should be called from the owning driver's Dispose implementation.
            </summary>
        </member>
        <member name="M:Ivi.Driver.LockManager.Dispose(System.Boolean)">
            <summary>
            Disposes of the LockManager class.  This method should be called from the owning driver's Dispose implementation.
            Derived classes can override this method to dispose of their resources while ensuring that the LockManager
            class resources are also properly disposed.
            </summary>
            <param name="disposing">Indicates if the Dispose call is occurring as a result of an explicit call to Dispose.  This
            determines whether or not it is safe to dispose of managed resources.  True indicates that managed resources can
            be disposed as the call is coming from an explicit call to Dispose.  A value of False for this parameter indicates
            that Dispose was called from the Finalizer, in which case it is not safe to Dispose of any managed resources held by this class.</param>
        </member>
        <member name="T:Ivi.Driver.PrecisionDateTime">
            <summary>
            Represents an instant in time, typically expressed as a date and time of day, with resolution
            suitable for LxiSync times.
            </summary>
            <remarks>
            Instruments sometimes require an absolute time which exceeds the resolution of the .NET Framework DateTime
            struct. To address these cases, IVI.NET provides the PrecisionDateTime struct, which provides a level of
            resolution similar to that defined by the IEEE 1588 standard.  PrecisionDateTime supports a range of dates
            from January 1, 1970 through December 31, 9999.  Time is internally represented in seconds since January 1,
            1970 (the IEEE 1588 epoch 0).  PrecisionDateTime stores date and time with femtosecond (1.0e-15 second)
            resolution.  The PrecisionDateTime struct is always based on the Gregorian calendar.  Time may be UTC time,
            local time, or unspecified.
            </remarks>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.#ctor(System.Boolean)">
            <summary>
            This constructor exists to create a NotATime "value" for PrecisionDateTime.
            </summary>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.#ctor(System.DateTimeKind)">
            <summary>
            This constructor exists to set the DateTimeKind and initialize other variables used to calculate times.
            </summary>
            <param name="kind">The DateTimeKind of the PrecisionDateTime instance. Values may be UTC, local, or unspecified.</param>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.#ctor(System.DateTime,System.Double)">
             <summary>
             Create a PrecisionDateTime instance from a .NET Framework DateTime parameter.  The number of ticks
             (100-nanosecond intervals) in the DateTime object is used to initialize the PrecisionDateTime object.  Since
             the DateTime class only supports a resolution of 100 nanoseconds, the seconds parameter allows increased
             resolution.  The range of valid dates is between 1/1/1970 00:00:00.0 UTC and 12/31/9999
             23:59:59.999999999999999 UTC.  If the resulting date is out of range, the constructor throws an error.
             </summary>
             <param name="dateTime">A .NET Framework DateTime object.</param>
             <param name="deltaSeconds">The number of seconds added to the time represented by dateTime.</param>
             <remarks>If the Kind of the DateTime object is UTC, then the Kind of the new PrecisionDateTime is UTC.
             Otherwise, the Kind of the new PrecisionDateTime object is Local.  PrecisionDateTime does not support
             Unspecified DateTimekind.
            </remarks>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.#ctor(System.DateTime)">
             <summary>
             Create a PrecisionDateTime instance from a .NET Framework DateTime parameter.  The number of ticks
             (100-nanosecond intervals) in the DateTime object is used to initialize the PrecisionDateTime object.  Since
             the DateTime class only supports a resolution of 100 nanoseconds, the seconds parameter allows increased
             resolution.  The range of valid dates is between 1/1/1970 00:00:00.0 UTC and 12/31/9999
             23:59:59.999999999999999 UTC.  If the resulting date is out of range, the constructor throws an error.
             </summary>
             <param name="dateTime">A .NET Framework DateTime object.</param>
             <remarks>If the Kind of the DateTime object is UTC, then the Kind of the new PrecisionDateTime is UTC.
             Otherwise, the Kind of the new PrecisionDateTime object is Local.  PrecisionDateTime does not support
             Unspecified DateTimekind.
            </remarks>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.#ctor(System.Decimal,System.DateTimeKind)">
            <summary>
            Create a PrecisionDateTime instance from a decimal number of seconds parameter.   The range of valid dates
            is between 1/1/1970 00:00:00.0 UTC and 12/31/9999 23:59:59.999999999999999 UTC.  If the resulting date is
            out of range, the constructor throws an error.
            </summary>
            <param name="seconds">The number of seconds (including fractional seconds) since 1/1/1970 00:00:00.0. Must
            be positive.</param>
            <param name="kind">The DateTimeKind of the PrecisionDateTime instance. Values may be UTC, Local, or
            Unspecified, but Unspecified is coerced to Local.</param>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.#ctor(System.Decimal)">
            <summary>
            Create a PrecisionDateTime instance from a decimal number of seconds parameter.   The range of valid dates
            is between 1/1/1970 00:00:00.0 UTC and 12/31/9999 23:59:59.999999999999999 UTC.  If the resulting date is
            out of range, the constructor throws an error.  Time is Local time.
            </summary>
            <param name="seconds">The number of seconds (including fractional seconds) since 1/1/1970 00:00:00.0 UTC.</param>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.#ctor(System.Double,System.Double,System.DateTimeKind)">
            <summary>
            Create a PrecisionDateTime instance from two LxiSync doubles that represent the number of seconds since 1/1/1970.
            The range of valid dates is between 1/1/1970 00:00:00.0 UTC and 12/31/9999 23:59:59.999999999999999 UTC.  If
            the resulting date is out of range, the constructor throws an error.
            </summary>
            <param name="secondsSinceEpoch">The total number of seconds since the beginning of the IEEE 1588 epoch (that
            is, the total number of seconds since 1/1/1970), rounded down to the nearest second.</param>
            <param name="secondsFractional">A fractional number of seconds (greater than or equal to 0.0, and less
            than 1.0) added to the time represented by lxiBaseSeconds.  This parameter provides for femtosecond resolution
            to the right of the decimal.  Resolution finer than femtoseconds will be rounded down.  Must be positive.</param>
            <param name="kind">The DateTimeKind of the PrecisionDateTime instance. Values may be UTC, Local, or
            Unspecified, but Unspecified is coerced to Local.</param>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.#ctor(System.Double,System.Double)">
            <summary>
            Create a PrecisionDateTime instance from two LxiSync doubles that represent the number of seconds since 1/1/1970.
            The range of valid dates is between 1/1/1970 00:00:00.0 UTC and 12/31/9999 23:59:59.999999999999999 UTC.  If
            the resulting date is out of range, the constructor throws an error.  Time is Local time.
            </summary>
            <param name="secondsSinceEpoch">The total number of seconds since the beginning of the IEEE 1588 epoch (that
            is, the total number of seconds since 1/1/1970), rounded down to the nearest second.</param>
            <param name="secondsFractional">A fractional number of seconds (greater than or equal to 0.0, and less
            than 1.0) added to the time represented by lxiBaseSeconds.  This parameter provides for femtosecond resolution
            to the right of the decimal.  Resolution finer than femtoseconds will be rounded down.  Must be positive.</param>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.#ctor(System.String,System.DateTimeKind)">
            <summary>
            Create a PrecisionDateTime instance from a string that represents the number of seconds since 1/1/1970.
            The range of valid dates is between 1/1/1970 00:00:00.0 UTC and 12/31/9999 23:59:59.999999999999999 UTC.  If
            the resulting date is out of range, the constructor throws an error.
            </summary>
            <param name="timeSinceEpoch">The number of seconds (including fractional seconds) since 1/1/1970. Must be positive.
            The expected format is a sequence of digits followed by a decimal point, followed by another series of digits.  For
            example, "123456.12345678".</param>
            <param name="kind">The DateTimeKind of the PrecisionDateTime instance. Values may be UTC, local, or unspecified.</param>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.#ctor(System.String)">
            <summary>
            Create a PrecisionDateTime instance from two LxiSync doubles that represent the number of seconds since 1/1/1970.
            The range of valid dates is between 1/1/1970 00:00:00.0 UTC and 12/31/9999 23:59:59.999999999999999 UTC.  If
            the resulting date is out of range, the constructor throws an error.  Time is Local time.
            </summary>
            <param name="timeSinceEpoch">The number of seconds (including fractional seconds) since 1/1/1970. Must be positive.
            The expected format is a sequence of digits followed by a decimal point, followed by another series of digits.  For
            example, "123456.12345678".</param>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.IsDaylightSavingTime">
            <summary>
            Determines if the given date time falls during daylight savings, otherwise false.
            </summary>
            <returns>True if the given date time falls during daylight savings, otherwise false.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.UtcOffset">
            <summary>
            Determines the UTC offset of this precision date time.
            </summary>
            <returns>Returns a TimeSpan object with the UTC offset.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.ThrowIfNotATime">
            <summary>
            The PrecisionDateTime internal representation of femtoseconds.
            </summary>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.Add(Ivi.Driver.PrecisionTimeSpan)">
            <summary>
            Adds the value of the specified PrecisionTimeSpan to the value of this instance. This method does not change
            the value of this PrecisionDateTime. Instead, a new PrecisionDateTime is returned whose value is the result
            of this operation.
            </summary>
            <param name="pts">The PrecisionTimeSpan instance to be added to this instance.</param>
            <returns>A new PrecisionDateTime instance that is the sum of this instance and pts.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.Add(System.TimeSpan)">
            <summary>
            Adds the value of the specified TimeSpan to the value of this instance. This method does not change
            the value of this PrecisionDateTime. Instead, a new PrecisionDateTime is returned whose value is the result
            of this operation.
            </summary>
            <param name="ts">The TimeSpan instance to be added to this instance.</param>
            <returns>A new PrecisionDateTime instance that is the sum of this instance and ts. If this instance is set
            to Not a Time, the method returns Not a Time.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.AddDays(System.Double)">
            <summary>
            Adds the specified number of days to the value of this instance.  This method does not change the value of
            this PrecisionDateTime. Instead, a new PrecisionDateTime is returned whose value is the result of this
            operation.
            </summary>
            <param name="days">The number of days to be added to the DateTime.</param>
            <returns>A new PrecisionTimeSpan instance with the additional days added. If this instance is set to Not a
            Time, the method returns Not a Time.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.AddFemtoseconds(System.Int64)">
            <summary>
            Adds the specified number of femtoseconds to the value of this instance. A femtosecond is 1.0e-15 second.
            This method does not change the value of this PrecisionDateTime. Instead, a new PrecisionDateTime is returned
            whose value is the result of this operation.
            </summary>
            <param name="femtoseconds">The number of femtoseconds to be added to the DateTime.</param>
            <returns>A new PrecisionTimeSpan instance with the additional femtoseconds added.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.AddHours(System.Double)">
            <summary>
            Adds the specified number of hours to the value of this instance.  This method does not change the value of
            this PrecisionDateTime. Instead, a new PrecisionDateTime is returned whose value is the result of this
            operation.
            </summary>
            <param name="hours">The number of hours to be added to the DateTime.</param>
            <returns>A new PrecisionTimeSpan instance with the additional hours added.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.AddMicroseconds(System.Double)">
            <summary>
            Adds the specified number of microseconds to the value of this instance. A microsecond is 1.0e-6 second.
            This method does not change the value of this PrecisionDateTime. Instead, a new PrecisionDateTime is returned
            whose value is the result of this operation.
            </summary>
            <param name="microseconds">The number of microseconds to be added to the DateTime.</param>
            <returns>A new PrecisionTimeSpan instance with the additional microoseconds added.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.AddMilliseconds(System.Double)">
            <summary>
            Adds the specified number of milliseconds to the value of this instance. A millisecond is 1.0e-3 second.
            This method does not change the value of this PrecisionDateTime. Instead, a new PrecisionDateTime is returned
            whose value is the result of this operation.
            </summary>
            <param name="milliseconds">The number of milliseconds to be added to the DateTime.</param>
            <returns>A new PrecisionTimeSpan instance with the additional millioseconds added.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.AddMinutes(System.Double)">
            <summary>
            Adds the specified number of minutes to the value of this instance.  This method does not change the value of
            this PrecisionDateTime. Instead, a new PrecisionDateTime is returned whose value is the result of this
            operation.
            </summary>
            <param name="minutes">The number of minutes to be added to the DateTime.</param>
            <returns>A new PrecisionTimeSpan instance with the additional minutes added.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.AddMonths(System.Int32)">
            <summary>
            Adds the specified number of months to the value of this instance.  This method does not change the value of
            this PrecisionDateTime. Instead, a new PrecisionDateTime is returned whose value is the result of this
            operation.
            </summary>
            <param name="months">The number of months to be added to the DateTime.</param>
            <returns>A new PrecisionTimeSpan instance with the additional months added.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.AddNanoseconds(System.Int64)">
            <summary>
            Adds the specified number of nanoseconds to the value of this instance. A nanosecond is 1.0e-9 second.
            This method does not change the value of this PrecisionDateTime. Instead, a new PrecisionDateTime is returned
            whose value is the result of this operation.
            </summary>
            <param name="nanoseconds">The number of nanoseconds to be added to the DateTime.</param>
            <returns>A new PrecisionTimeSpan instance with the additional nanoseconds added.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.AddPicoseconds(System.Int64)">
            <summary>
            Adds the specified number of picoseconds to the value of this instance. A picosecond is 1.0e-12 second.
            This method does not change the value of this PrecisionDateTime. Instead, a new PrecisionDateTime is returned
            whose value is the result of this operation.
            </summary>
            <param name="picoseconds">The number of picoseconds to be added to the DateTime.</param>
            <returns>A new PrecisionTimeSpan instance with the additional picoseconds added.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.AddSeconds(System.Double)">
            <summary>
            Adds the specified number of seconds to the value of this instance. This method does not change the value of
            this PrecisionDateTime. Instead, a new PrecisionDateTime is returned whose value is the result of this
            operation.
            </summary>
            <param name="seconds">The number of seconds to be added to the DateTime.</param>
            <returns>A new PrecisionTimeSpan instance with the additional seconds added.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.AddSeconds(System.Decimal)">
            <summary>
            Adds the specified number of seconds to the value of this instance. This method does not change the value of
            this PrecisionDateTime. Instead, a new PrecisionDateTime is returned whose value is the result of this
            operation.
            </summary>
            <param name="seconds">The number of seconds to be added to the DateTime.</param>
            <returns>A new PrecisionTimeSpan instance with the additional seconds added.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.AddYears(System.Int32)">
            <summary>
            Adds the specified number of years to the value of this instance.  This method does not change the value of
            this PrecisionDateTime. Instead, a new PrecisionDateTime is returned whose value is the result of this
            operation.
            </summary>
            <param name="years">The number of years to be added to the DateTime.</param>
            <returns>A new PrecisionTimeSpan instance with the additional years added.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.Compare(Ivi.Driver.PrecisionDateTime,Ivi.Driver.PrecisionDateTime)">
            <summary>
            Compares two instances of PrecisionDateTime and returns an indication of their relative values. Before
            comparing DateTime objects, both are converted to UTC time.
            </summary>
            <param name="pdt1">A PrecisionDateTime.</param>
            <param name="pdt2">A PrecisionDateTime.</param>
            <returns>A signed number indicating the relative values of pdt1 and pdt2. If the return value is less
            than zero, then pdt1 falls before pdt2. If the return value is equal to zero, then pdt1 and pdt2 are
            the same date and time. If the return value is greater than zero, then pdt1 falls after pdt2.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.CompareTo(Ivi.Driver.PrecisionDateTime)">
            <summary>
            Compares this instance to a specified PrecisionDateTime object and returns an indication of their relative
            values. Before comparing DateTime objects, both are converted to UTC time.
            </summary>
            <param name="other">A PrecisionDateTime object.</param>
            <returns>A signed number indicating the relative values of this instance and 'other'. If the return value is less
            than zero, then this instance falls before 'other'. If the return value is equal to zero, then this instance and
            'other' are the same date and time. If the return value is greater than zero, then this instance falls after 'other'.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified PrecisionDateTime object and returns an indication of their relative
            values. Before comparing DateTime objects, both are converted to UTC time.
            Any instance of DateTime, regardless of its value, is considered greater than a null reference.
            </summary>
            <param name="obj">A boxed PrecisionDateTime object to compare, or a null reference.</param>
            <returns>A signed number indicating the relative values of this instance and 'obj'. If the return value is
            less than zero, then this instance falls before 'obj'. If the return value is equal to zero, then this
            instance and 'obj' are the same date and time. If the return value is greater than zero, then this instance
            falls after 'obj'.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.Equals(Ivi.Driver.PrecisionDateTime)">
            <summary>
            Tests whether the another PrecisionDateTime refers to this instance.
            </summary>
            <param name="other">A PrecisionDateTime object.</param>
            <returns>True if this instance and the 'other' instance are the same instance of PrecisionDateTime.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.Subtract(Ivi.Driver.PrecisionTimeSpan)">
            <summary>
            Subtracts the value of the specified PrecisionTimeSpan from the value of this instance. This method does not change
            the value of this PrecisionDateTime. Instead, a new PrecisionDateTime is returned whose value is the result
            of this operation.
            </summary>
            <param name="pts">The PrecisionTimeSpan instance to be subtracted from this instance.</param>
            <returns>A new PrecisionDateTime instance that is the difference of this instance and the pts.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.Subtract(System.TimeSpan)">
            <summary>
            Subtracts the value of the specified TimeSpan from the value of this instance. This method does not change
            the value of this PrecisionDateTime. Instead, a new PrecisionDateTime is returned whose value is the result
            of this operation.
            </summary>
            <param name="ts">The TimeSpan instance to be subtracted from this instance.</param>
            <returns>A new PrecisionDateTime instance that is the difference of this instance and ts.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.ToDateTime">
            <summary>
            Returns a new DateTime with the value of this instance of PrecisionDateTime, with femtoseconds rounded down
            to the nearest 100 nanoseconds. The DateTimeKind for the new DateTime is the same as for this instance
            of PrecisionDateTime.
            </summary>
            <returns>A DateTime whose value is the date and time represented by this instance with femtoseconds
            rounded down to the nearest 100 nanoseconds.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.ToDecimal">
            <summary>
            Returns a new Decimal whose value is the value of this instance of PrecisionDateTime in seconds, with
            resolution to the nearest femtosecond.
            </summary>
            <returns>A Decimal whose value represents the interval from 1/1/1970 to the date and time represented
            by this instance in seconds with femtosecond resolution.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.ToLocalTime">
            <summary>
            Returns a new PrecisionDateTime whose value is the value of this instance of PrecisionDateTime converted
            to local time (if needed).  If DateTimeKind is unspecified in this instance, it is treated as local time.
            </summary>
            <returns>A PrecisionDateTime whose value is the date and time represented by this instance, converted to
            local time (if needed).</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.ToString(System.String)">
            <summary>
            Converts the value of the current PrecisionDateTime object to its equivalent string representation. The
            string is a subset of the string returned by this.ToDateTime().ToString(), with the addition of fractional
            seconds to femtosecond resolution whenever long times are used.
            </summary>
            <param name="format">A PrecisionDateTime format string, which may be a single standard PrecisionDateTime
            format specifier, or a format string composed of custom PrecisionDateTime format specifier(s).</param>
            <returns>A formatted string representation of the value of the current PrecisionDateTime object.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.ToUniversalTime">
            <summary>
            Returns a new PrecisionDateTime whose value is the value of this instance of PrecisionDateTime converted
            to universal time (if needed).  If DateTimeKind is unspecified in this instance, it is treated as local time.
            </summary>
            <returns>A PrecisionDateTime whose value is the date and time represented by this instance, converted to
            universal time (if needed).</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.op_Addition(Ivi.Driver.PrecisionDateTime,Ivi.Driver.PrecisionTimeSpan)">
            <summary>
            Adds a specified time interval to a specified date and time, yielding a new date and time.
            </summary>
            <param name="pdt">A PrecisionDateTime that contains the date and time to be added to.</param>
            <param name="pts">A PrecisionTimeSpan that contains the interval to add.</param>
            <returns>A PrecisionDateTime whose value is the sum of the date and time represented by pdt and the time interval
            represented by pts.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.op_Addition(Ivi.Driver.PrecisionDateTime,System.TimeSpan)">
            <summary>
            Adds a specified time interval to a specified date and time, yielding a new date and time.
            </summary>
            <param name="pdt">A PrecisionDateTime that contains the date and time to be added to.</param>
            <param name="ts">A TimeSpan that contains the interval to add.</param>
            <returns>A PrecisionDateTime whose value is the sum of the date and time represented by pdt and the time
            interval represented by ts.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.op_Subtraction(Ivi.Driver.PrecisionDateTime,Ivi.Driver.PrecisionTimeSpan)">
            <summary>
            Subtracts a specified time interval from a specified date and time, yielding a new PrecisionDateTime.
            </summary>
            <param name="pdt">A PrecisionDateTime that contains the date and time to be subtracted from.</param>
            <param name="pts">A PrecisionTimeSpan that contains the interval to subtract.</param>
            <returns>A PrecisionDateTime whose value is the difference of the date and time represented by pdt and the
            time interval represented by pts.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.op_Subtraction(Ivi.Driver.PrecisionDateTime,System.TimeSpan)">
            <summary>
            Subtracts a specified time interval from a specified date and time, yielding a new PrecisionDateTime.
            </summary>
            <param name="pdt">A PrecisionDateTime that contains the date and time to be subtracted from.</param>
            <param name="ts">A TimeSpan that contains the interval to subtract.</param>
            <returns>A PrecisionDateTime whose value is the difference of the date and time represented by pdt and the
            time interval represented by ts.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.op_Subtraction(Ivi.Driver.PrecisionDateTime,Ivi.Driver.PrecisionDateTime)">
            <summary>
            Subtracts a specified date and time from another specified date and time, yielding a time interval that
            is the interval between the two.
            </summary>
            <param name="pdt1">A PrecisionDateTime that contains the date and time to be subtracted from.</param>
            <param name="pdt2">A PrecisionDateTime that contains the date and time to be subtracted.</param>
            <returns>A PrecisionTimeSpan whose value is the difference of the date and time represented by pdt and the
            date and time represented by pdt2.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.op_Subtraction(Ivi.Driver.PrecisionDateTime,System.DateTime)">
            <summary>
            Subtracts a specified date and time from another specified date and time, yielding a time interval that
            is the interval between the two.
            </summary>
            <param name="pdt">A PrecisionDateTime that contains the date and time to be subtracted from.</param>
            <param name="dt">A DateTime that contains the date and time to be subtracted.</param>
            <returns>A PrecisionTimeSpan whose value is the difference of the date and time represented by pdt and the
            date and time represented by dt.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.op_Equality(Ivi.Driver.PrecisionDateTime,Ivi.Driver.PrecisionDateTime)">
            <summary>
            Determines whether two specified instances of PrecisionDateTime are equal.
            </summary>
            <param name="pdt1">A PrecisionDateTime.</param>
            <param name="pdt2">A PrecisionDateTime.</param>
            <returns>true if pdt1 and pdt2 represent the same date and time; otherwise, false.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.op_Inequality(Ivi.Driver.PrecisionDateTime,Ivi.Driver.PrecisionDateTime)">
            <summary>
            Determines whether two specified instances of PrecisionDateTime are not equal.
            </summary>
            <param name="pdt1">A PrecisionDateTime.</param>
            <param name="pdt2">A PrecisionDateTime.</param>
            <returns>true if pdt1 and pdt2 represent different date and times; otherwise, false.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.op_GreaterThanOrEqual(Ivi.Driver.PrecisionDateTime,Ivi.Driver.PrecisionDateTime)">
            <summary>
            Determines whether one specified PrecisionDateTime is later than or equal to another specified
            PrecisionDateTime.
            </summary>
            <param name="pdt1">A PrecisionDateTime.</param>
            <param name="pdt2">A PrecisionDateTime.</param>
            <returns>true if pdt1 and pdt2 represent the same date and time, or if pdt1 is later than pdt2, otherwise
            false.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.op_LessThanOrEqual(Ivi.Driver.PrecisionDateTime,Ivi.Driver.PrecisionDateTime)">
            <summary>
            Determines whether one specified PrecisionDateTime is earlier than or equal to another specified
            PrecisionDateTime.
            </summary>
            <param name="pdt1">A PrecisionDateTime.</param>
            <param name="pdt2">A PrecisionDateTime.</param>
            <returns>true if pdt1 and pdt2 represent the same date and time, or if pdt1 is earlier than pdt2, otherwise
            false.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.op_GreaterThan(Ivi.Driver.PrecisionDateTime,Ivi.Driver.PrecisionDateTime)">
            <summary>
            Determines whether one specified PrecisionDateTime is later than another specified PrecisionDateTime.
            </summary>
            <param name="pdt1">A PrecisionDateTime.</param>
            <param name="pdt2">A PrecisionDateTime.</param>
            <returns>true if pdt1 is later than pdt2, otherwise false.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.op_LessThan(Ivi.Driver.PrecisionDateTime,Ivi.Driver.PrecisionDateTime)">
            <summary>
            Determines whether one specified PrecisionDateTime is earlier than another specified PrecisionDateTime.
            </summary>
            <param name="pdt1">A PrecisionDateTime.</param>
            <param name="pdt2">A PrecisionDateTime.</param>
            <returns>true if if pdt1 is earlier than pdt2, otherwise false.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.Equals(System.Object)">
            <summary>
            Determines whether two specified instances of PrecisionDateTime represent the same precision date and time.
            </summary>
            <param name="obj">A boxed PrecisionDateTime object to compare, or a null reference.</param>
            <returns>True if this instance and the 'obj' instance represent the same precision date and time.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.GetHashCode">
            <summary>
            Returns the hash code for this instance. 
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionDateTime.ToString">
            <summary>
            Converts the value of the current PrecisionDateTime object to its equivalent string representation using the
            default “G” format specifier.
            </summary>
            <returns>The formatted date and time.</returns>
        </member>
        <member name="P:Ivi.Driver.PrecisionDateTime.UtcOffsetInSeconds">
            <summary>
            The difference between UTC and local time in seconds for this precision date time.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionDateTime.SecondsToStartOf1970">
            <summary>
            The PrecisionDateTime internal representation of integer seconds from the start of the year 0 to the start
            of the year 1970.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionDateTime.Day">
            <summary>
            The day of the month represented by this instance, expressed as an integer value between 1 and 31.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionDateTime.DayOfWeek">
            <summary>
            A DayOfWeek enumerated constant that indicates the day of the week of this DateTime value.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionDateTime.DayOfYear">
            <summary>
            The day of the year represented by this instance, expressed as an integer value between 1 and 366.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionDateTime.Femtosecond">
            <summary>
            The femtosecond component of the date and time represented by this instance, expressed as an integer value
            between 0 and 999,999,999,999,999.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionDateTime.Hour">
            <summary>
            The hour component of the date represented by this instance, expressed as an integer value between 0 and 23.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionDateTime.IsNotATime">
            <summary>
            Indicates whether this instance represents Not a Time.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionDateTime.Kind">
            <summary>
            The hour component of the date represented by this instance, expressed as an integer value between 0 and 23.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionDateTime.MaxValue">
            <summary>
            The largest possible value of PrecisionDateTime.  The value of this constant is equivalent to
            23:59:59.999999999999999, December 31, 9999, exactly one femtosecond before 00:00:00, January 1, 10000.
            This property is read-only.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionDateTime.Microsecond">
            <summary>
            The microsecond component of the date and time represented by this instance, expressed as a value
            between 0 and 999,999.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionDateTime.Millisecond">
            <summary>
            The millisecond component of the date and time represented by this instance, expressed as a value
            between 0 and 999,999.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionDateTime.Minute">
            <summary>
            The minute component of the date represented by this instance, expressed as an integer value between 0 and
            59.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionDateTime.MinValue">
            <summary>
            Represents the smallest possible value of PrecisionDateTime. The value of this constant is equivalent to
            00:00:00.000000000000000, January 1, 0001. This property is read-only.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionDateTime.Month">
            <summary>
            The month component of the date represented by this instance, expressed as an integer value between 0 and 12.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionDateTime.Nanosecond">
            <summary>
            The nanosecond component of the date and time represented by this instance, expressed as a value
            between 0 and 999,999,999.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionDateTime.NotATime">
            <summary>
            A PrecisionDateTime instance that represents NaT (Not a Time).
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionDateTime.Now">
            <summary>
            The PrecisionDateTime object that is set to the current date and time on this computer, expressed as the
            local time, to DateTime resolution.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionDateTime.Picosecond">
            <summary>
            The picosecond component of the date and time represented by this instance, expressed as a value
            between 0 and 999,999,999,999.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionDateTime.Second">
            <summary>
            The second component of the date represented by this instance, expressed as an integer value between 0 and 59.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionDateTime.SecondsFractional">
            <summary>
            The fractional portion (remainder) since the end of the last whole second.  The value will always be less
            than 1.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionDateTime.SecondsSinceEpoch">
            <summary>
            The total number of seconds since the beginning of the IEEE 1588 epoch (that is, the total number of seconds
            since 1/1/1970), rounded down to the nearest second.
            </summary>
            <remarks>The value does not have a fractional part.  For the fractional part of the total number of seconds
            since the beginning of the IEEE 1588 epoch, see the SecondsFractional property.
            </remarks>
        </member>
        <member name="P:Ivi.Driver.PrecisionDateTime.Year">
            <summary>
            The year component of the date represented by this instance, expressed as an integer value between 1970 and
            9999.
            </summary>
        </member>
        <member name="T:Ivi.Driver.PrecisionTimeResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeResources._pdtCulture">
            <summary>
              Looks up a localized string similar to en-US.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeResources._pdtDateTooEarly">
            <summary>
              Looks up a localized string similar to PrecisionDateTime does not support dates earlier than 1/1/1970..
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeResources._pdtDateTooLate">
            <summary>
              Looks up a localized string similar to PrecisionDateTime does not support dates later than 12/31/9999..
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeResources._pdtFormatStringd">
            <summary>
              Looks up a localized string similar to M/d/yyyy.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeResources._pdtFormatStringNaT">
            <summary>
              Looks up a localized string similar to NaT.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeResources._pdtFormatStringNotUtc">
            <summary>
              Looks up a localized string similar to Not a UTC date and time..
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeResources._pdtFormatStrings">
            <summary>
              Looks up a localized string similar to yyyy-MM-dd HH:mm:ss.fffffffffffffff Z.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeResources._pdtFormatStringt">
            <summary>
              Looks up a localized string similar to h:m tt.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeResources._pdtFormatStringUpperCaseT">
            <summary>
              Looks up a localized string similar to h:m:s.fffffffffffffff tt.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeResources._pdtInvalidSecondsStringFormat">
            <summary>
              Looks up a localized string similar to The format of the input string is invalid..
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeResources._pdtNotATimeInvalid">
            <summary>
              Looks up a localized string similar to This instance of PrecisionDateTime is NaT..
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeResources._pdtParameterMustBeBoxed">
            <summary>
              Looks up a localized string similar to The parameter must be a boxed PrecisionDateTime object..
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeResources._pdtParameterMustBeLessThanOne">
            <summary>
              Looks up a localized string similar to The parameter must be less than 1.0..
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeResources._pdtParameterMustBeZeroOrPositive">
            <summary>
              Looks up a localized string similar to The parameter must be zero or positive..
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeResources._pdtUnexpectedError">
            <summary>
              Looks up a localized string similar to Unexpected error.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeResources._ptsCannotConvertStringToDecimal">
            <summary>
              Looks up a localized string similar to The parameter cannot be converted to a System.Decimal number due to a formatting error..
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeResources._ptsCulture">
            <summary>
              Looks up a localized string similar to en-US.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeResources._ptsDurationTooLong">
            <summary>
              Looks up a localized string similar to PrecisionTimeSpan overflowed because the duration is too long..
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeResources._ptsMultiplierTooLarge">
            <summary>
              Looks up a localized string similar to The multiplier is too large for the given time span..
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeResources._ptsParameterMustBeBoxed">
            <summary>
              Looks up a localized string similar to The parameter must be a boxed PrecisionTimeSpan object..
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeResources._ptsSecondsFractionalNotFractional">
            <summary>
              Looks up a localized string similar to The secondsFractional parameter must be between -1.0 and +1.0, exclusive..
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeResources._ptsStringToDecimalOverflow">
            <summary>
              Looks up a localized string similar to The parameter cannot be converted to a System.Decimal number due to an overflow..
            </summary>
        </member>
        <member name="T:Ivi.Driver.PrecisionTimeSpan">
            <summary>
            Represents a time span with resolution suitable for LxiSync times.
            </summary>
            <remarks>
            Instruments sometimes require a time span which exceeds the resolution of the .NET Framework TimeSpan struct.
            To address these cases, IVI.NET provides the PrecisionTimeSpan struct, which provides a level of resolution
            similar to that defined by the IEEE 1588 standard.  PrecisionTimeSpan supports positive and negative time spans,
            with a maximum length exactly equal to the number of seconds from the start of day, January 1, 1970 through the
            end of day, December 31, 9999.  Time is internally represented in seconds.  PrecisionTimeSpan stores time with
            femtosecond (1.0e-15 second) resolution.
            </remarks>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.#ctor(System.Int32)">
            <summary>
            This constructor exists to initialize variables used to calculate times.
            </summary>
            <param name="junk">Here only because struct constructors must have a parameter.  It is not used.</param>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.#ctor(System.TimeSpan,System.Double)">
            <summary>
            Create a PrecisionTimeSpan instance from a .NET Framework TimeSpan parameter.  Since the TimeSpan class
            only supports a resolution of 100 nanoseconds, the deltaSeconds parameter allows the user to specify
            additional resolution.
            </summary>
            <param name="span">A .NET Framework TimeSpan object that refers to an interval shorter than the absolute
            value of PrecisionTimeSpan.MaxValue.  The number of ticks (100-nanosecond intervals) in the TimeSpan object
            is used to initialize the PrecisionTimeSpan object.</param>
            <param name="deltaSeconds">The number of seconds added to the time represented by span.</param>
            <remarks>If the resulting precision time span is greater than the absolute value of
            PrecisionTimeSpan.MaxValue, the constructor throws an error.</remarks>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.#ctor(System.TimeSpan)">
            <summary>
            Create a PrecisionTimeSpan instance from a .NET Framework TimeSpan parameter.
            </summary>
            <param name="span">A .NET Framework TimeSpan object that refers to an interval shorter than the absolute
            value of PrecisionTimeSpan.MaxValue.  The number of ticks (100-nanosecond intervals) in the TimeSpan object
            is used to initialize the PrecisionTimeSpan object.</param>
            <remarks>If the resulting precision time span is greater than the absolute value of
            PrecisionTimeSpan.MaxValue, the constructor throws an error.</remarks>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.#ctor(System.Decimal)">
            <summary>
            Create a PrecisionTimeSpan instance from a number of seconds.
            </summary>
            <param name="seconds">The number of seconds in the time span.</param>
            <remarks>If the resulting precision time span is greater than the absolute value of
            PrecisionTimeSpan.MaxValue, the constructor throws an error.</remarks>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.#ctor(System.Double,System.Double)">
            <summary>
            Create a PrecisionTimeSpan instance from two LxiSync doubles that represent the number of seconds in the time
            span.
            </summary>
            <param name="secondsTotal">The total number of seconds in the time span.</param>
            <param name="secondsFractional">A fractional number of seconds (between -1.0 and 1.0, exclusive) added to
            the time represented by secondsTotal.</param>
            <remarks>If the resulting precision time span is greater than the absolute value of
            PrecisionTimeSpan.MaxValue, the constructor throws an error.</remarks>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.#ctor(System.String)">
            <summary>
            Create a PrecisionTimeSpan instance from a string that represents a number of seconds.
            </summary>
            <param name="seconds">The number of seconds in the time span. Must be positive. The expected format is a
            sequence of digits followed by a decimal point, followed by another series of digits.  For example,
            "123456.12345678".</param>
            <remarks>If the resulting precision time span is greater than the absolute value of
            PrecisionTimeSpan.MaxValue, the constructor throws an error.</remarks>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.Add(Ivi.Driver.PrecisionTimeSpan)">
            <summary>
            Adds the value of the specified PrecisionTimeSpan to the value of this instance. This method does not change
            the value of this PrecisionTimeSpan. Instead, a new PrecisionTimeSpan is returned whose value is the result
            of this operation.
            </summary>
            <param name="pts">The PrecisionTimeSpan instance to be added to this instance.</param>
            <returns>A new PrecisionTimeSpan instance that is the sum of this instance and pts.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.Add(System.TimeSpan)">
            <summary>
            Adds the value of the specified TimeSpan to the value of this instance. This method does not change
            the value of this PrecisionTimeSpan. Instead, a new PrecisionTimeSpan is returned whose value is the result
            of this operation.
            </summary>
            <param name="ts">The TimeSpan instance to be added to this instance.</param>
            <returns>A new PrecisionTimeSpan instance that is the sum of this instance and ts.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.Compare(Ivi.Driver.PrecisionTimeSpan,Ivi.Driver.PrecisionTimeSpan)">
            <summary>
            Compares two instances of PrecisionTimeSpan and returns an indication of their relative values.
            </summary>
            <param name="pts1">A PrecisionTimeSpan.</param>
            <param name="pts2">A PrecisionTimeSpan.</param>
            <returns>A signed number indicating the relative values of pts1 and pts2. If the return value is less
            than zero, then pts1 falls before pts2. If the return value is equal to zero, then pts1 and pts2 are
            the same. If the return value is greater than zero, then pts1 falls after pts2.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.CompareTo(Ivi.Driver.PrecisionTimeSpan)">
            <summary>
            Compares this instance to a specified PrecisionTimeSpan object and returns an indication of their relative
            values.
            </summary>
            <param name="other">A PrecisionTimeSpan.</param>
            <returns>A signed number indicating the relative values of this instance and pts. If the return value is less
            than zero, then this instance falls before pts. If the return value is equal to zero, then this instance and
            pts are the same. If the return value is greater than zero, then this instance falls after pts.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified PrecisionTimeSpan object and returns an indication of their relative
            values.  Any instance of PrecisionTimeSpan, regardless of its value, is considered greater than a null reference.
            </summary>
            <param name="obj">A boxed PrecisionTimeSpan object to compare, or a null reference.</param>
            <returns>A signed number indicating the relative values of this instance and pts. If the return value is less
            than zero, then this instance falls before pts. If the return value is equal to zero, then this instance and
            pts are the same. If the return value is greater than zero, then this instance falls after pts.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.Duration">
            <summary>
            Returns the absolute value of this instance. This method does not change the value of this PrecisionTimeSpan.
            Instead, a new PrecisionTimeSpan is returned whose value is the result of this operation.
            </summary>
            <returns>A new PrecisionTimeSpan instance that is the negative of this instance.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.Equals(Ivi.Driver.PrecisionTimeSpan)">
            <summary>
            Determines whether two specified instances of PrecisionTimeSpan represent the same precision time span.
            </summary>
            <param name="other">A PrecisionTimeSpan.</param>
            <returns>True if this instance and the 'other' instance represent the same precision time span.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.FromDays(System.Double)">
            <summary>
            Returns a new PrecisionTimeSpan instance with a length in days equal to the input parameter. 
            </summary>
            <param name="days">A number of days.</param>
            <returns>A new PrecisionTimeSpan instance with a length in days equal to the input parameter.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.FromHours(System.Double)">
            <summary>
            Returns a new PrecisionTimeSpan instance with a length in hours equal to the input parameter. 
            </summary>
            <param name="hours">A number of hours.</param>
            <returns>A new PrecisionTimeSpan instance with a length in hours equal to the input parameter.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.FromMicroseconds(System.Double)">
            <summary>
            Returns a new PrecisionTimeSpan instance with a length in microseconds equal to the input parameter. 
            </summary>
            <param name="microseconds">A number of microseconds.</param>
            <returns>A new PrecisionTimeSpan instance with a length in microseconds equal to the input parameter.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.FromMilliseconds(System.Double)">
            <summary>
            Returns a new PrecisionTimeSpan instance with a length in milliseconds equal to the input parameter. 
            </summary>
            <param name="milliseconds">A number of milliseconds.</param>
            <returns>A new PrecisionTimeSpan instance with a length in milliseconds equal to the input parameter.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.FromMinutes(System.Double)">
            <summary>
            Returns a new PrecisionTimeSpan instance with a length in minutes equal to the input parameter. 
            </summary>
            <param name="minutes">A number of minutes.</param>
            <returns>A new PrecisionTimeSpan instance with a length in minutes equal to the input parameter.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.FromNanoseconds(System.Double)">
            <summary>
            Returns a new PrecisionTimeSpan instance with a length in nanoseconds equal to the input parameter. 
            </summary>
            <param name="nanoseconds">A number of nanoseconds.</param>
            <returns>A new PrecisionTimeSpan instance with a length in nanoseconds equal to the input parameter.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.FromPicoseconds(System.Double)">
            <summary>
            Returns a new PrecisionTimeSpan instance with a length in picoseconds equal to the input parameter. 
            </summary>
            <param name="picoseconds">A number of picoseconds.</param>
            <returns>A new PrecisionTimeSpan instance with a length in picoseconds equal to the input parameter.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.FromSeconds(System.Double)">
            <summary>
            Returns a new PrecisionTimeSpan instance with a length in seconds equal to the input parameter. 
            </summary>
            <param name="seconds">A number of seconds.</param>
            <returns>A new PrecisionTimeSpan instance with a length in seconds equal to the input parameter.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.Multiply(System.Double)">
            <summary>
            Multiplies the value of this TimeSpan by an integer. This method does not change the value of this
            PrecisionTimeSpan. Instead, a new PrecisionTimeSpan is returned whose value is the result of this operation.
            </summary>
            <param name="factor">The integer by which this instance is to be multiplied.</param>
            <returns>A new PrecisionTimeSpan instance that is the product of this instance and factor.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.Negate">
            <summary>
            Negates this instance. This method does not change the value of this PrecisionTimeSpan. Instead, a new
            PrecisionTimeSpan is returned whose value is the result of this operation.
            </summary>
            <returns>A new PrecisionTimeSpan instance that is the negative of this instance.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.Plus">
            <summary>
            Unary plus. This method does not change the value of this PrecisionTimeSpan. Instead, a new
            PrecisionTimeSpan is returned whose value is the result of this operation.
            </summary>
            <returns>A new PrecisionTimeSpan instance with the same value as this instance.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.Subtract(Ivi.Driver.PrecisionTimeSpan)">
            <summary>
            Subtracts the value of the specified PrecisionTimeSpan from the value of this instance. This method does not change
            the value of this PrecisionTimeSpan. Instead, a new PrecisionTimeSpan is returned whose value is the result
            of this operation.
            </summary>
            <param name="pts">The PrecisionTimeSpan instance to be subtracted from this instance.</param>
            <returns>A new PrecisionTimeSpan instance that is the difference of this instance and the pts.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.Subtract(System.TimeSpan)">
            <summary>
            Subtracts the value of the specified TimeSpan from the value of this instance. This method does not change
            the value of this PrecisionTimeSpan. Instead, a new PrecisionTimeSpan is returned whose value is the result
            of this operation.
            </summary>
            <param name="ts">The TimeSpan instance to be subtracted from this instance.</param>
            <returns>A new PrecisionTimeSpan instance that is the difference of this instance and ts.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.ToDecimal">
            <summary>
            Returns a new Decimal whose value is the value of this instance of PrecisionTimeSpan in seconds, with
            resolution to the nearest femtosecond.
            </summary>
            <returns>A Decimal whose value is the value of this instance of PrecisionTimeSpan in seconds, with
            resolution to the nearest femtosecond.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.ToString(System.String)">
            <summary>
            Converts the value of the current PrecisionTimeSpan object to its equivalent string representation. The
            string is similar to the string returned by this.ToTimeSpan().ToString(), with the addition of fractional
            seconds to femtosecond resolution.
            </summary>
            <param name="format">A PrecisionTimeSpan format string, which is composed of custom PrecisionTimeSpan
            format specifier(s).</param>
            <returns>A formatted string representation of the value of the current PrecisionTimeSpan object.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.ToTimeSpan">
            <summary>
            Returns a new TimeSpan with the value of this instance of PrecisionTimeSpan, with femtoseconds rounded down
            to the nearest 100 nanoseconds.
            </summary>
            <returns>A TimeSpan whose value is the date and time represented by this instance with femtoseconds
            rounded down to the nearest 100 nanoseconds.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.op_UnaryPlus(Ivi.Driver.PrecisionTimeSpan)">
            <summary>
            Returns pts.
            </summary>
            <param name="pts">A PrecisionTimeSpan.</param>
            <returns>A PrecisionTimeSpan with the same numeric value as the original PrecisionTimeSpan.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.op_UnaryNegation(Ivi.Driver.PrecisionTimeSpan)">
            <summary>
            Returns a PrecisionTimeSpan with the same numeric value as pts, but the opposite sign.
            </summary>
            <param name="pts">A PrecisionTimeSpan.</param>
            <returns>A PrecisionTimeSpan with the same numeric value as the original PrecisionTimeSpan, but the opposite sign.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.op_Addition(Ivi.Driver.PrecisionTimeSpan,Ivi.Driver.PrecisionTimeSpan)">
            <summary>
            Adds a PrecisionTimeSpan to another PrecisionTimeSpan, yielding a new PrecisionTimeSpan.
            </summary>
            <param name="pts1">A PrecisionTimeSpan that contains the time span to be added to.</param>
            <param name="pts2">A PrecisionTimeSpan that contains the time span to add.</param>
            <returns>A PrecisionTimeSpan whose value is the sum of the time spans represented by pts1 and pts2.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.op_Addition(Ivi.Driver.PrecisionTimeSpan,System.TimeSpan)">
            <summary>
            Adds a PrecisionTimeSpan to a TimeSpan, yielding a new PrecisionTimeSpan.
            </summary>
            <param name="pts">A PrecisionTimeSpan that contains the time span to be added to.</param>
            <param name="ts">A TimeSpan that contains the time span to add.</param>
            <returns>A PrecisionTimeSpan whose value is the sum of the time spans represented by pts and ts.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.op_Addition(System.TimeSpan,Ivi.Driver.PrecisionTimeSpan)">
            <summary>
            Adds a PrecisionTimeSpan to a TimeSpan, yielding a new PrecisionTimeSpan.
            </summary>
            <param name="ts">A PrecisionTimeSpan that contains the time span to be added to.</param>
            <param name="pts">A TimeSpan that contains the time span to add.</param>
            <returns>A PrecisionTimeSpan whose value is the sum of the time spans represented by pts and ts.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.op_Subtraction(Ivi.Driver.PrecisionTimeSpan,Ivi.Driver.PrecisionTimeSpan)">
            <summary>
            Subtracts a PrecisionTimeSpan from another PrecisionTimeSpan, yielding a new PrecisionTimeSpan.
            </summary>
            <param name="pts1">A PrecisionTimeSpan that contains the time span to be subtracted from.</param>
            <param name="pts2">A PrecisionTimeSpan that contains the time span to subtract.</param>
            <returns>A PrecisionTimeSpan whose value is the difference between the time spans represented by pts1 and pts2.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.op_Subtraction(Ivi.Driver.PrecisionTimeSpan,System.TimeSpan)">
            <summary>
            Subtracts a TimeSpan from a PrecisionTimeSpan, yielding a new PrecisionTimeSpan.
            </summary>
            <param name="pts">A PrecisionTimeSpan that contains the time span to be subtracted from.</param>
            <param name="ts">A TimeSpan that contains the time span to subtract.</param>
            <returns>A PrecisionTimeSpan whose value is the sum of the time spans represented by pts and ts.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.op_Subtraction(System.TimeSpan,Ivi.Driver.PrecisionTimeSpan)">
            <summary>
            Subtracts a TimeSpan from a PrecisionTimeSpan, yielding a new PrecisionTimeSpan.
            </summary>
            <param name="ts">A TimeSpan that contains the time span to be subtracted from.</param>
            <param name="pts">A PrecisionTimeSpan that contains the time span to subtract.</param>
            <returns>A PrecisionTimeSpan whose value is the sum of the time spans represented by pts and ts.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.op_Multiply(Ivi.Driver.PrecisionTimeSpan,System.Double)">
            <summary>
            Multiplies a PrecisionTimeSpan by a numeric multiplier, yielding a new PrecisionTimeSpan whose length is
            the product of the multiplier and the number of seconds in the original time span.
            </summary>
            <param name="pts">A PrecisionTimeSpan.</param>
            <param name="factor">The multiplier.</param>
            <returns>A PrecisionTimeSpan whose length is the product of the multiplier and the number of seconds in
            the original time span.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.op_Equality(Ivi.Driver.PrecisionTimeSpan,Ivi.Driver.PrecisionTimeSpan)">
            <summary>
            Determines whether two specified instances of PrecisionTimeSpan are equal.
            </summary>
            <param name="pts1">A PrecisionTimeSpan.</param>
            <param name="pts2">A PrecisionTimeSpan.</param>
            <returns>true if pts1 and pts2 represent the same time span; otherwise, false.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.op_Inequality(Ivi.Driver.PrecisionTimeSpan,Ivi.Driver.PrecisionTimeSpan)">
            <summary>
            Determines whether two specified instances of PrecisionTimeSpan are not equal.
            </summary>
            <param name="pts1">A PrecisionTimeSpan.</param>
            <param name="pts2">A PrecisionTimeSpan.</param>
            <returns>true if pts1 and pts2 represent different time spans; otherwise, false.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.op_GreaterThanOrEqual(Ivi.Driver.PrecisionTimeSpan,Ivi.Driver.PrecisionTimeSpan)">
            <summary>
            Determines whether one specified PrecisionTimeSpan is greater than or equal to another specified
            PrecisionTimeSpan.
            </summary>
            <param name="pts1">A PrecisionTimeSpan.</param>
            <param name="pts2">A PrecisionTimeSpan.</param>
            <returns>true if pts1 and pts2 represent the same time span, or if pts1 is greater than pts2, otherwise
            false.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.op_LessThanOrEqual(Ivi.Driver.PrecisionTimeSpan,Ivi.Driver.PrecisionTimeSpan)">
            <summary>
            Determines whether one specified PrecisionTimeSpan is less than or equal to another specified
            PrecisionTimeSpan.
            </summary>
            <param name="pts1">A PrecisionTimeSpan.</param>
            <param name="pts2">A PrecisionTimeSpan.</param>
            <returns>true if pts1 and pts2 represent the same time span, or if pts1 is less than pts2, otherwise
            false.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.op_GreaterThan(Ivi.Driver.PrecisionTimeSpan,Ivi.Driver.PrecisionTimeSpan)">
            <summary>
            Determines whether one specified PrecisionTimeSpan is greater than another specified PrecisionTimeSpan.
            </summary>
            <param name="pts1">A PrecisionTimeSpan.</param>
            <param name="pts2">A PrecisionTimeSpan.</param>
            <returns>true if pts1 is greater than pts2, otherwise false.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.op_LessThan(Ivi.Driver.PrecisionTimeSpan,Ivi.Driver.PrecisionTimeSpan)">
            <summary>
            Determines whether one specified PrecisionTimeSpan is less than another specified PrecisionTimeSpan.
            </summary>
            <param name="pts1">A PrecisionTimeSpan.</param>
            <param name="pts2">A PrecisionTimeSpan.</param>
            <returns>true if pts1 is less than pts2, otherwise false.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.Equals(System.Object)">
            <summary>
            Determines whether two specified instances of PrecisionTimeSpan represent the same precision time span.
            </summary>
            <param name="obj">A boxed PrecisionTimeSpan object to compare, or a null reference.</param>
            <returns>True if this instance and the 'obj' instance represent the same precision time span.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.GetHashCode">
            <summary>
            Returns the hash code for this instance. 
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Ivi.Driver.PrecisionTimeSpan.ToString">
            <summary>
            Converts the value of the current PrecisionTimeSpan object to its equivalent string representation using the
            default "d.hh:mm:ss.fffffffffffffff" format specifier.
            </summary>
            <returns>The formatted time span string.</returns>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeSpan.Days">
            <summary>
            The days component of the time span represented by this instance, expressed as an integer.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeSpan.Femtoseconds">
            <summary>
            The fractional seconds represented as femtoseconds for the time span represented by this instance, expressed
            as a value between -999,999,999,999,999 and 999,999,999,999,999.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeSpan.Hours">
            <summary>
            The hours component of the time span represented by this instance, expressed as an integer between -23 and
            23.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeSpan.MaxValue">
            <summary>
            The largest possible value of PrecisionTimeSpan.  The value of this constant is equivalent to
            exactly the number of femtoseconds between the start of day, 1/1/1970 inclusive, and the end of day,
            12/31/9999, exclusive.  The value is positive.  This property is read-only.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeSpan.Microseconds">
            <summary>
            The fractional seconds represented as microseconds for the time span represented by this instance, expressed
            as a value between -999,999 and 999,999.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeSpan.Milliseconds">
            <summary>
            The fractional seconds represented as milliseconds for the time span represented by this instance, expressed
            as a value between -999 and 999.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeSpan.Minutes">
            <summary>
            The minutes component of the time span represented by this instance, expressed as an integer between -59 and
            59.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeSpan.MinValue">
            <summary>
            The largest possible value of PrecisionTimeSpan.  The value of this constant is equivalent to
            exactly the number of femtoseconds between the end of day, 12/31/9999, exclusive, and the start
            of day, 1/1/1970, inclusive.  The value is negative.  This property is read-only.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeSpan.Nanoseconds">
            <summary>
            The fractional seconds represented as nanoseconds for the time span represented by this instance, expressed
            as a value between -999,999,999 and 999,999,999.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeSpan.Picoseconds">
            <summary>
            The fractional seconds represented as picoseconds for the time span represented by this instance, expressed
            as a value between -999,999,999,999 and 999,999,999,999.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeSpan.Seconds">
            <summary>
            The seconds component of the time span represented by this instance, expressed as an integer between -59 and
            59.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeSpan.SecondsFractional">
            <summary>
            The fractional portion (remainder) of the total number of seconds in the time span, expressed as a value
            between -1 and 1, exclusive.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeSpan.SecondsTotal">
            <summary>
            A value that represents the integer portion of the total number of seconds in the interval.  Any digits to
            the right of the decimal point are truncated.
            </summary>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeSpan.TotalDays">
            <summary>
            A value that represents the value of the current PrecisionTimeSpan object expressed in whole and
            fractional days.
            </summary>
            <remarks>
            One value of type Double cannot represent the full resolution of a precision time span object.  The full
            resolution is represented by the SecondsTotal and SecondsFractional properties taken together.
            </remarks>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeSpan.TotalHours">
            <summary>
            A value that represents the value of the current PrecisionTimeSpan object expressed in whole and
            fractional hours.
            </summary>
            <remarks>
            One value of type Double cannot represent the full resolution of a precision time span object.  The full
            resolution is represented by the SecondsTotal and SecondsFractional properties taken together.
            </remarks>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeSpan.TotalMilliseconds">
            <summary>
            A value that represents the value of the current PrecisionTimeSpan object expressed in whole and
            fractional milliseconds.
            </summary>
            <remarks>
            One value of type Double cannot represent the full resolution of a precision time span object.  The full
            resolution is represented by the SecondsTotal and SecondsFractional properties taken together.
            </remarks>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeSpan.TotalMinutes">
            <summary>
            A value that represents the value of the current PrecisionTimeSpan object expressed in whole and
            fractional minutes.
            </summary>
            <remarks>
            One value of type Double cannot represent the full resolution of a precision time span object.  The full
            resolution is represented by the SecondsTotal and SecondsFractional properties taken together.
            </remarks>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeSpan.TotalSeconds">
            <summary>
            A value that represents the value of the current PrecisionTimeSpan object expressed in whole and
            fractional seconds.
            </summary>
            <remarks>
            One value of type Double cannot represent the full resolution of a precision time span object.  The full
            resolution is represented by the SecondsTotal and SecondsFractional properties taken together.
            </remarks>
        </member>
        <member name="P:Ivi.Driver.PrecisionTimeSpan.Zero">
            <summary>
            A PrecisionTimeSpan with no length.  This property is read-only.
            </summary>
        </member>
        <member name="T:Ivi.Driver.Spectrum`1">
            <summary>
            The default implementation of the IVI.NET spectrum class.
            </summary>
            <typeparam name="T">Int64, Int32, Int16, Byte, Single, or Double.</typeparam>
        </member>
        <member name="M:Ivi.Driver.Spectrum`1.#ctor(Ivi.Driver.ISpectrum{`0})">
            <summary>
            Initializes a new instance of the Ivi.Driver.Spectrum class.  This constructor creates an empty spectrum with implicit axes copied from another spectrum. 
            </summary>
            <param name="spectrum">A spectrum whose implicit axis information will be copied into this spectrum.</param>
        </member>
        <member name="M:Ivi.Driver.Spectrum`1.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Ivi.Driver.Spectrum class.  This constructor initializes an empty spectrum. 
            </summary>
            <param name="startFrequency">The frequency of the first valid data point in the data array.</param>
            <param name="stopFrequency">The frequency of the last valid data point in the data array</param>
        </member>
        <member name="M:Ivi.Driver.Spectrum`1.#ctor(System.Double,System.Double,System.Int64)">
            <summary>
            Initializes a new instance of the Ivi.Driver.Spectrum class.  This constructor initializes an empty spectrum. 
            </summary>
            <param name="startFrequency">The frequency of the first valid data point in the data array.</param>
            <param name="stopFrequency">The frequency of the last valid data point in the data array</param>
            <param name="capacity">The capacity of the spectrum data array</param>
        </member>
        <member name="M:Ivi.Driver.Spectrum`1.#ctor(System.Double,System.Double,Ivi.Driver.PrecisionDateTime)">
            <summary>
            Initializes a new instance of the Ivi.Driver.Spectrum class.  This constructor initializes an empty spectrum. 
            </summary>
            <param name="startFrequency">The frequency of the first valid data point in the data array.</param>
            <param name="stopFrequency">The frequency of the last valid data point in the data array</param>
            <param name="triggerTime">The time of the trigger associated with the acquisition of the spectrum</param>
        </member>
        <member name="M:Ivi.Driver.Spectrum`1.#ctor(System.Double,System.Double,Ivi.Driver.PrecisionDateTime,System.Int64)">
            <summary>
            Initializes a new instance of the Ivi.Driver.Spectrum class.  This constructor initializes the spectrum
            with user data. 
            </summary>
            <param name="startFrequency">The frequency of the first valid data point in the data array.</param>
            <param name="stopFrequency">The frequency of the last valid data point in the data array</param>
            <param name="triggerTime">The time of the trigger associated with the acquisition of the spectrum</param>
            <param name="capacity">The capacity of the spectrum data array</param>
        </member>
        <member name="M:Ivi.Driver.Spectrum`1.Configure(System.Double,System.Double,Ivi.Driver.PrecisionDateTime,System.Int64)">
            <summary>
            The Configure method defines the frequency (implicit) axis and number of data points in the spectrum.  Because of
            the interaction between these values, they are set as a group with this method or when the spectrum is
            initially created.  If triggerTime is not specified,
            it defaults to Not A Time.  If validPointCount is not specified, the number of elements in the spectrum is not changed.
            </summary>
            <param name="startFrequency">The frequency of the first valid data point in the spectrum (required).</param>
            <param name="stopFrequency">The frequency of the last valid data point in the spectrum (required).</param>
            <param name="triggerTime">The time that this measurement was triggered.</param>
            <param name="validPointCount">The actual number of elements in the spectrum.</param>
            <remarks>The Configure method does not change any of the explicit data in the Spectrum.  The capacity of the spectrum does
            not change as a side effect of the Configure method.  If the validPointCount exceeds the data array size, an
            Insufficient Capacity exception is thrown.
            </remarks>
        </member>
        <member name="M:Ivi.Driver.Spectrum`1.Configure(System.Double,System.Double,Ivi.Driver.PrecisionDateTime)">
            <summary>
            The Configure method defines the frequency (implicit) axis and number of data points in the spectrum.  Because of
            the interaction between these values, they are set as a group with this method or when the spectrum is
            initially created.  If triggerTime is not specified,
            it defaults to Not A Time.  If validPointCount is not specified, the number of elements in the spectrum is not changed.
            </summary>
            <param name="startFrequency">The frequency of the first valid data point in the spectrum (required).</param>
            <param name="stopFrequency">The frequency of the last valid data point in the spectrum (required).</param>
            <param name="triggerTime">The time that this measurement was triggered.</param>
            <remarks>The Configure method does not change any of the explicit data in the Spectrum.  The capacity of the spectrum does
            not change as a side effect of the Configure method.  If the validPointCount exceeds the data array size, an
            Insufficient Capacity exception is thrown.
            </remarks>
        </member>
        <member name="M:Ivi.Driver.Spectrum`1.Configure(System.Double,System.Double,System.Int64)">
            <summary>
            The Configure method defines the frequency (implicit) axis and number of data points in the spectrum.  Because of
            the interaction between these values, they are set as a group with this method or when the spectrum is
            initially created.  If triggerTime is not specified,
            it defaults to Not A Time.  If validPointCount is not specified, the number of elements in the spectrum is not changed.
            </summary>
            <param name="startFrequency">The frequency of the first valid data point in the spectrum (required).</param>
            <param name="stopFrequency">The frequency of the last valid data point in the spectrum (required).</param>
            <param name="validPointCount">The actual number of elements in the spectrum.</param>
            <remarks>The Configure method does not change any of the explicit data in the Spectrum.  The capacity of the spectrum does
            not change as a side effect of the Configure method.  If the validPointCount exceeds the data array size, an
            Insufficient Capacity exception is thrown.
            </remarks>
        </member>
        <member name="M:Ivi.Driver.Spectrum`1.Configure(System.Double,System.Double)">
            <summary>
            The Configure method defines the frequency (implicit) axis and number of data points in the spectrum.  Because of
            the interaction between these values, they are set as a group with this method or when the spectrum is
            initially created.  If triggerTime is not specified,
            it defaults to Not A Time.  If validPointCount is not specified, the number of elements in the spectrum is not changed.
            </summary>
            <param name="startFrequency">The frequency of the first valid data point in the spectrum (required).</param>
            <param name="stopFrequency">The frequency of the last valid data point in the spectrum (required).</param>
            <remarks>The Configure method does not change any of the explicit data in the Spectrum.  The capacity of the spectrum does
            not change as a side effect of the Configure method.  If the validPointCount exceeds the data array size, an
            Insufficient Capacity exception is thrown.
            </remarks>
        </member>
        <member name="M:Ivi.Driver.Spectrum`1.GetAllElements">
            <summary>
            GetAllElements returns a copy of the entire data array in the template data type.  Note that for scaled (that
            is, integer) types, the scaling must be applied to the returned data elements to convert them to physical
            values by the calling program.
            </summary>
            <returns>A copy of the entire data array in the template data type.</returns>
            <remarks>If the array is too large, this method will throw an Out Of Memory exception.</remarks>
        </member>
        <member name="M:Ivi.Driver.Spectrum`1.GetElements(System.Int64,System.Int64)">
            <summary>
            GetElements returns a copy of a portion of the entire data array in the template data type, starting at the
            specified index and including the number of elements specified by count.  Note that for scaled (that
            is, integer) types, the scaling must be applied to the returned data elements to convert them to physical
            values by the calling program.
            </summary>
            <param name="index">The index in the spectrum that will be the first element in the returned array.  That is,
            element zero in the returned array is at this index in the spectrum.</param>
            <param name="count">The number of elements to be returned.</param>
            <returns>A copy of a portion of the entire data array in the template data type, starting at the specified
            index and including the number of elements specified by count.</returns>
        </member>
        <member name="M:Ivi.Driver.Spectrum`1.GetScaled(System.Int64)">
            <summary>
            GetScaled returns one element of the data array as a Double.  If the internal data array is an integer, the
            scaling is applied to the returned value.
            </summary>
            <param name="index">The index of the data element to return.</param>
            <returns>One element of the data array as a Double.</returns>
        </member>
        <member name="M:Ivi.Driver.Spectrum`1.GetScaled(System.Int64,System.Int64)">
            <summary>
            GetScaled returns all or part of the data array as a Double.  If the internal data array is an integer, the
            scaling is applied to the values in the returned array.
            </summary>
            <param name="index">The index of the first element in the array to return.</param>
            <param name="count">The number of data points to include in the returned array.</param>
            <returns>All or part of the data array as a Double.</returns>
        </member>
        <member name="M:Ivi.Driver.Spectrum`1.PutElements(`0[])">
            <summary>
            PutElements sets all or part of the data array in a spectrum, starting at the element specified by index, or
            (by default, if index is not used) at the beginning of the array.  index is the first element of the spectrum
            data array to receive the new data.  If the array passed extends beyond the end of the spectrum, an
            ArgumentException will be thrown. The implicit axis of the spectrum is not changed by PutElements.
            </summary>
            <param name="data">The data to be placed into the spectrum array.</param>
        </member>
        <member name="M:Ivi.Driver.Spectrum`1.PutElements(System.Int64,`0[])">
            <summary>
            PutElements sets all or part of the data array in a spectrum, starting at the element specified by index, or
            (by default, if index is not used) at the beginning of the array.  index is the first element of the spectrum
            data array to receive the new data.  If the array passed extends beyond the end of the spectrum, an ArgumentException
            will be thrown.  The implicit axis of the spectrum is not changed by PutElements.
            </summary>
            <param name="index">The index of the first element of the data array to change.</param>
            <param name="data">The data to be placed into the spectrum array.</param>
        </member>
        <member name="M:Ivi.Driver.Spectrum`1.PutElements(System.Int64,System.ArraySegment{`0})">
            <summary>
            PutElements sets all or part of the data array in a spectrum, starting at the element specified by index, or
            (by default, if index is not used) at the beginning of the array.  index is the first element of the spectrum
            data array to receive the new data.  If the array passed extends beyond the end of the spectrum, only
            the elements up to the length of the spectrum are copied.  The implicit axis of the spectrum is not
            changed by PutElements.
            </summary>
            <param name="index">The index of the first element of the data array to change.</param>
            <param name="segment">The data to be placed into the spectrum array.</param>
        </member>
        <member name="P:Ivi.Driver.Spectrum`1.Data">
            <summary>
            A public, in-memory array containing elements of type T that contains the explicit spectrum data.
            Clients can use the Data property to directly access the in-memory data without copying data.
            </summary>
            <remarks>Setting this property does not make a copy of the array specified.</remarks>
        </member>
        <member name="P:Ivi.Driver.Spectrum`1.Item(System.Int64)">
            <summary>
            This returns the data element at the specified index in the spectrum.  Note that for scaled (that is,
            integer) types, the scaling must be applied to the returned data element to convert it to a physical value
            by the calling program.
            </summary>
            <param name="index">The index of the data element to be returned from the spectrum array.</param>
            <returns>The data element to be returned from the spectrum array.</returns>
        </member>
        <member name="P:Ivi.Driver.Spectrum`1.Capacity">
            <summary>
            The number of elements that the spectrum array can store.  Use ValidPointCount to get the
            actual number of elements in this spectrum.
            </summary>
        </member>
        <member name="P:Ivi.Driver.Spectrum`1.ContainsInvalidElement">
            <summary>
            True if one or more points in the spectrum array are not valid, otherwise false.
            </summary>
            <remarks>If the elements are composed of a floating point type, ContainsInvalidElement returns
            true if at least one element is set to NaN.  If the elements are not composed of floating point types,
            setting and reading ContainsInvalidElement will throw a Property Not Implemented exeption.
            </remarks>
        </member>
        <member name="P:Ivi.Driver.Spectrum`1.ContainsOutOfRangeElement">
            <summary>
            True if one or more points in the spectrum array are out of range.  Out of range values are too large or too
            small to represent.  Numbers that are too close to zero to represent are not considered out of range.
            </summary>
            <remarks>If the elements are composed of a floating point type, ContainsOutOfRangeElement will return true if
            at least one element is set to +Inf or -Inf.  If the elements are not composed of floating point
            types, setting and reading ContainsOutOfRangeElement will throw a Ivi.Driver.OperationNotSupportedException exeption.
            </remarks>
        </member>
        <member name="P:Ivi.Driver.Spectrum`1.FirstValidPoint">
            <summary>
            For waveforms that contain invalid padding data at the beginning of the data array, FirstValidPoint indicates
            the first element in the data array with valid data.  If there is no padding data at the beginning of the data
            array, FirstValidPoint will be zero.
            </summary>
        </member>
        <member name="P:Ivi.Driver.Spectrum`1.FrequencyStep">
            <summary>
            FrequencyStep is the frequency difference between subsequent points in the data array.  This value is set by the Configure method.  If there are no valid points, frequencystep is 0.
            </summary>
        </member>
        <member name="P:Ivi.Driver.Spectrum`1.Offset">
            <summary>
            The offset to apply to scale integer values.  To convert an integer data array element to a physical value
            first it is multiplied by the scale, and then the offset is added.  If the integers in the data array do
            not have an offset, the offset property is 0.  If the contents of the data array are floating point scalars,
            the offset property is set to 0.  If the contents of the data array are some other type, the use of the offset
            is dependent on that driver and data type.
            </summary>
        </member>
        <member name="P:Ivi.Driver.Spectrum`1.Scale">
            <summary>
            The factor to apply to scale integer values.  To convert an integer data array element to a physical value
            the element is multiplied by scale, and then the offset is added.  If the integers in the data array do not
            have an offset, the scale property is set to 1.  If the contents of the data array are floating point
            scalars, the scale property is set to 1.  If the contents of the data array are some other type, the use of
            the scale is dependent on that driver and data type.
            </summary>
        </member>
        <member name="P:Ivi.Driver.Spectrum`1.StartFrequency">
            <summary>
            StartFrequency is the frequency of the first valid point in the data array.  This value is set by the Configure method.
            </summary>
        </member>
        <member name="P:Ivi.Driver.Spectrum`1.StopFrequency">
            <summary>
            StopFrequency is the frequency of the last valid point in the data array.  This value is set by the Configure method.
            </summary>
        </member>
        <member name="P:Ivi.Driver.Spectrum`1.TriggerTime">
            <summary>
            The time that this measurement was triggered.   This value is set by the Configure method.
            </summary>
        </member>
        <member name="P:Ivi.Driver.Spectrum`1.ValidPointCount">
            <summary>
            The actual number of elements in the spectrum.  Use Capacity to get the number of elements
            that the spectrum can store.
            </summary>
        </member>
        <member name="T:Ivi.Driver.ErrorQueryResult">
            <summary>
            Result of an error query operation.
            </summary>
        </member>
        <member name="M:Ivi.Driver.ErrorQueryResult.#ctor(System.Int32,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="code">Instrument error code.</param>
            <param name="message">Instrument error message.</param>
        </member>
        <member name="M:Ivi.Driver.ErrorQueryResult.Equals(System.Object)">
            <summary>
            Compares two <see cref="T:ErrorQueryResult"></see> instances for equality.
            </summary>
            <param name="obj">The <see cref="T:ErrorQueryResult"></see> instance to compare with the current instance.</param>
            <returns>true if the two instances represent the same result; otherwise, false.</returns>
        </member>
        <member name="M:Ivi.Driver.ErrorQueryResult.GetHashCode">
            <summary>
            Returns the hash code for the result.
            </summary>
            <returns>An <see cref="T:System.Int32"></see> containing the hash value generated for this result.</returns>
        </member>
        <member name="M:Ivi.Driver.ErrorQueryResult.op_Equality(Ivi.Driver.ErrorQueryResult,Ivi.Driver.ErrorQueryResult)">
            <summary>
            Determines whether two <see cref="T:ErrorQueryResult"></see> instances have the same value.
            </summary>
            <param name="result1">A <see cref="T:ErrorQueryResult"></see> instance to compare with result2.</param>
            <param name="result2">A <see cref="T:ErrorQueryResult"></see> instance to compare with result1.</param>
            <returns>true if the <see cref="T:ErrorQueryResult"></see> instances are equivalent; otherwise, false.</returns>
        </member>
        <member name="M:Ivi.Driver.ErrorQueryResult.op_Inequality(Ivi.Driver.ErrorQueryResult,Ivi.Driver.ErrorQueryResult)">
            <summary>
            Determines whether two <see cref="T:ErrorQueryResult"></see> instances do not have the same value.
            </summary>
            <param name="result1">A <see cref="T:ErrorQueryResult"></see> instance to compare with result2.</param>
            <param name="result2">A <see cref="T:ErrorQueryResult"></see> instance to compare with result1.</param>
            <returns>true if the two <see cref="T:ErrorQueryResult"></see> instances are not equal; otherwise, false. If either parameter is null, this method returns true.</returns>
        </member>
        <member name="P:Ivi.Driver.ErrorQueryResult.Code">
            <summary>
            Instrument error code.
            </summary>
        </member>
        <member name="P:Ivi.Driver.ErrorQueryResult.Message">
            <summary>
            Instrument error message.
            </summary>
        </member>
        <member name="T:Ivi.Driver.IIviComponentIdentity">
            <summary>
            IVI Component identity interface.
            </summary>
        </member>
        <member name="P:Ivi.Driver.IIviComponentIdentity.Description">
            <summary>
            A brief description of the implementing component.  
            </summary>
        </member>
        <member name="P:Ivi.Driver.IIviComponentIdentity.Revision">
            <summary>
            The revision of the implementing component.  Refer to IVI 3.2, 
            Section 3.1.2.2, for a description of revision syntax and semantics.  
            </summary>
        </member>
        <member name="P:Ivi.Driver.IIviComponentIdentity.Vendor">
            <summary>
            The name of the vendor that supplies the implementing component.  
            </summary>
        </member>
        <member name="T:Ivi.Driver.IIviDriver">
            <summary>
            IVI Driver root interface.
            </summary>
        </member>
        <member name="M:Ivi.Driver.IIviDriver.Close">
            <summary>
            Closes the I/O session to the instrument, as well as other unmanaged 
            resources.  The behavior is the same as IDisposable.Dispose.
            </summary>
        </member>
        <member name="P:Ivi.Driver.IIviDriver.DriverOperation">
            <summary>
            Reference to the IIviDriverOperation interface.
            </summary>
        </member>
        <member name="P:Ivi.Driver.IIviDriver.Identity">
            <summary>
            Reference to the IIviDriverIdentity interface.
            </summary>
        </member>
        <member name="P:Ivi.Driver.IIviDriver.Utility">
            <summary>
            Reference to the IIviDriverUtility interface.
            </summary>
        </member>
        <member name="T:Ivi.Driver.IIviDriverIdentity">
            <summary>
            IVI Driver identity interface.
            </summary>
        </member>
        <member name="M:Ivi.Driver.IIviDriverIdentity.GetSupportedInstrumentModels">
            <summary>
            Returns the list of instrument models that the IVI specific 
            driver can control.  The string does not include an abbreviation 
            for the manufacturer if it is the same for all models.
            </summary>
            <returns>Array of instrument models.</returns>
        </member>
        <member name="M:Ivi.Driver.IIviDriverIdentity.GetGroupCapabilities">
            <summary>
            Returns the list of the class capability groups implemented by the 
            driver.  Capability group names are documented in the IVI class 
            specifications.  If the driver is not class compliant, the driver 
            returns an empty array.
            </summary>
            <returns>Array of class capability groups.</returns>
        </member>
        <member name="P:Ivi.Driver.IIviDriverIdentity.InstrumentManufacturer">
            <summary>
            The name of the manufacturer reported by the physical instrument.  
            If Simulation is enabled or the instrument is not capable of 
            reporting the name of the manufacturer, a string is returned that 
            explains the condition.
            </summary>
        </member>
        <member name="P:Ivi.Driver.IIviDriverIdentity.InstrumentModel">
            <summary>
            The model number or name reported by the physical instrument.  
            If Simulation is enabled or the instrument is not capable of 
            reporting the model number or name, a string is returned that 
            explains the condition.
            </summary>
        </member>
        <member name="P:Ivi.Driver.IIviDriverIdentity.InstrumentFirmwareRevision">
            <summary>
            The firmware revision reported by the physical instrument.  If 
            Simulation is enabled or the instrument is not capable of 
            reporting the firmware revision, a string is returned that 
            explains the condition.
            </summary>
        </member>
        <member name="P:Ivi.Driver.IIviDriverIdentity.Identifier">
            <summary>
            The case-sensitive unique identifier of the implementing IVI.NET 
            instrument driver.
            </summary>
        </member>
        <member name="P:Ivi.Driver.IIviDriverIdentity.SpecificationMajorVersion">
            <summary>
            For IVI class-compliant drivers, the major version number of the 
            instrument class specification.  If the driver is not class 
            compliant, the driver returns zero.
            </summary>
        </member>
        <member name="P:Ivi.Driver.IIviDriverIdentity.SpecificationMinorVersion">
            <summary>
            For IVI class-compliant drivers, the minor version number of the 
            instrument class specification.  If the driver is not class 
            compliant, the driver returns zero.
            </summary>
        </member>
        <member name="T:Ivi.Driver.IIviDriverOperation">
            <summary>
            IVI Driver operation interface.
            </summary>
        </member>
        <member name="M:Ivi.Driver.IIviDriverOperation.ResetInterchangeCheck">
            <summary>
            Resets the interchangeability checking algorithms of the driver 
            so that methods and properties that executed prior to calling this 
            method have no affect on whether future calls to the driver 
            generate interchangeability warnings.
            </summary>
        </member>
        <member name="M:Ivi.Driver.IIviDriverOperation.InvalidateAllAttributes">
            <summary>
            Invalidates all of the driver's cached values.
            </summary>
        </member>
        <member name="P:Ivi.Driver.IIviDriverOperation.LogicalName">
            <summary>
            Logical Name identifies a driver session in the Configuration Store.  
            If Logical Name is not empty, the driver was initialized from 
            information in the driver session.  If it is empty, the driver was 
            initialized without using the Configuration Store.
            </summary>
        </member>
        <member name="P:Ivi.Driver.IIviDriverOperation.IOResourceDescriptor">
            <summary>
            The resource descriptor specifies the connection to a physical 
            device.  It is either specified in the Configuration Store or 
            passed in the resource name at initialization.
            </summary>
        </member>
        <member name="P:Ivi.Driver.IIviDriverOperation.Cache">
            <summary>
            Drivers may choose to always cache some instrument settings, never 
            cache others, and optionally cache others, to avoid unecessary I/O 
            to the instrument.  If True, the driver caches optionally cached 
            instrument settings.
            </summary>
        </member>
        <member name="P:Ivi.Driver.IIviDriverOperation.QueryInstrumentStatus">
            <summary>
            If True, the driver queries the instrument status at the end of 
            each method or property that performs I/O to the instrument.  If 
            an error is reported, use ErrorQuery to retrieve error messages 
            one at a time from the instrument.
            </summary>
        </member>
        <member name="P:Ivi.Driver.IIviDriverOperation.RangeCheck">
            <summary>
            Drivers may choose to always validate some property/parameter 
            values, never validate others, and optionally validate others, 
            to avoid sending invalid commands to the instrument.  If True, 
            the driver performs optional validations.
            </summary>
        </member>
        <member name="P:Ivi.Driver.IIviDriverOperation.Simulate">
            <summary>
            If True, the driver does not perform I/O to the instrument, and 
            returns simulated values for output parameters.
            </summary>
        </member>
        <member name="P:Ivi.Driver.IIviDriverOperation.DriverSetup">
            <summary>
            The driver setup string.  It is either specified in the 
            Configuration Store or passed via the optionString parameter to a driver constructor.
            </summary>
        </member>
        <member name="E:Ivi.Driver.IIviDriverOperation.Warning">
            <summary>
            Warning event.
            </summary>
        </member>
        <member name="E:Ivi.Driver.IIviDriverOperation.Coercion">
            <summary>
            Coercion record event.
            </summary>
        </member>
        <member name="E:Ivi.Driver.IIviDriverOperation.InterchangeCheckWarning">
            <summary>
            Interchange check warning event.
            </summary>
        </member>
        <member name="T:Ivi.Driver.IIviDriverUtility">
            <summary>
            IVI Driver utility interface.
            </summary>
        </member>
        <member name="M:Ivi.Driver.IIviDriverUtility.ErrorQuery">
            <summary>
            Queries the instrument and returns instrument specific error 
            information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ivi.Driver.IIviDriverUtility.SelfTest">
            <summary>
            Performs an instrument self test, waits for the instrument to 
            complete the test, and queries the instrument for the results.  
            If the instrument passes the test, TestResult is zero and 
            TestMessage is 'Self test passed'.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ivi.Driver.IIviDriverUtility.Disable">
            <summary>
            Quickly places the instrument in a state where it has no, or 
            minimal, effect on the external system to which it is connected.  
            This state is not necessarily a known state.
            </summary>
        </member>
        <member name="M:Ivi.Driver.IIviDriverUtility.ResetWithDefaults">
            <summary>
            Does the equivalent of Reset and then, (1) disables class 
            extension capability groups, (2) sets properties to initial 
            values defined by class specs, and (3) configures the driver 
            to option string settings used in the driver constructor.
            </summary>
        </member>
        <member name="M:Ivi.Driver.IIviDriverUtility.Reset">
            <summary>
            Places the instrument in a known state and configures instrument 
            options on which the IVI specific driver depends (for example, 
            enabling/disabling headers).  For an IEEE 488.2 instrument, 
            Reset sends the command string *RST to the instrument.
            </summary>
        </member>
        <member name="M:Ivi.Driver.IIviDriverUtility.Lock">
            <summary>
            Attempts to acquire a synchronization lock on this instance of the driver.  The calling thread is blocked
            indefinitely until the lock is acquired. This method is useful for gaining exclusive access to the driver
            instance across a series of methods calls.  The user must call the Unlock method on the returned lock to
            relinquish the lock and allow other threads to access this instance of the driver.
            </summary>
            <returns>A reference to the acquired lock.  Unlock is called on the returned reference.</returns>
            <remarks>This is not an I/O lock, such as a VISA lock.  It is a thread synchronization lock for this instance
            of the specific driver in the process.</remarks>
        </member>
        <member name="M:Ivi.Driver.IIviDriverUtility.Lock(Ivi.Driver.PrecisionTimeSpan)">
            <summary>
            Attempts to acquire a synchronization lock on this instance of the driver.  The calling thread is blocked
            until either the lock is acquired or maxTime expires.  If the lock is not acquired within the interval specified
            by maxTime, an exception is thrown.  This method is useful for gaining exclusive access to the driver instance
            across a series of methods calls.  The user must call the Unlock method on the returned lock to relinquish the
            lock and allow other threads to access this instance of the driver.
            </summary>
            <param name="maxTime">Specifies the maximum amount of time to wait to acquire the lock.</param>
            <returns>A reference to the acquired lock.  Unlock is called on the returned reference.</returns>
            <remarks>This is not an I/O lock, such as a VISA lock.  It is a thread synchronization lock for this instance
            of the specific driver in the process.</remarks>
        </member>
        <member name="T:Ivi.Driver.IIviRepeatedCapabilityCollection`1">
            <summary>
            IVI Driver repeated capability collection interface.
            </summary>
        </member>
        <member name="P:Ivi.Driver.IIviRepeatedCapabilityCollection`1.Count">
            <summary>
            The number of repeated capability instances.
            </summary>
        </member>
        <member name="P:Ivi.Driver.IIviRepeatedCapabilityCollection`1.Item(System.String)">
            <summary>
            Returns the repeated capability instance for a given repeated 
            capability identifier.
            </summary>
            <param name="name">Repeated capability identifier.</param>
            <returns>Repeated capability instance.</returns>
        </member>
        <member name="T:Ivi.Driver.IIviRepeatedCapabilityIdentification">
            <summary>
            IVI Driver repeated capability identification interface.
            </summary>
        </member>
        <member name="P:Ivi.Driver.IIviRepeatedCapabilityIdentification.Name">
            <summary>
            The repeated capability physical identifier.
            </summary>
        </member>
        <member name="T:Ivi.Driver.InterchangeCheckWarningEventArgs">
            <summary>
            Interchange check warning event arguments.
            </summary>
        </member>
        <member name="M:Ivi.Driver.InterchangeCheckWarningEventArgs.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="text">Warning message.</param>
        </member>
        <member name="P:Ivi.Driver.InterchangeCheckWarningEventArgs.Text">
            <summary>
            Warning message.
            </summary>
        </member>
        <member name="T:Ivi.Driver.SelfTestResult">
            <summary>
            Result of a self test operation.
            </summary>
        </member>
        <member name="M:Ivi.Driver.SelfTestResult.#ctor(System.Int32,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="code">The numeric result from the self test operation. 0 = no error (test passed).</param>
            <param name="message">The self test status message.</param>
        </member>
        <member name="M:Ivi.Driver.SelfTestResult.Equals(System.Object)">
            <summary>
            Compares two <see cref="T:SelfTestResult"></see> instances for equality.
            </summary>
            <param name="obj">The <see cref="T:SelfTestResult"></see> instance to compare with the current instance.</param>
            <returns>true if the two instances represent the same result; otherwise, false.</returns>
        </member>
        <member name="M:Ivi.Driver.SelfTestResult.GetHashCode">
            <summary>
            Returns the hash code for the result.
            </summary>
            <returns>An <see cref="T:System.Int32"></see> containing the hash value generated for this result.</returns>
        </member>
        <member name="M:Ivi.Driver.SelfTestResult.op_Equality(Ivi.Driver.SelfTestResult,Ivi.Driver.SelfTestResult)">
            <summary>
            Determines whether two <see cref="T:SelfTestResult"></see> instances have the same value.
            </summary>
            <param name="result1">A <see cref="T:SelfTestResult"></see> instance to compare with result2.</param>
            <param name="result2">A <see cref="T:SelfTestResult"></see> instance to compare with result1.</param>
            <returns>true if the <see cref="T:SelfTestResult"></see> instances are equivalent; otherwise, false.</returns>
        </member>
        <member name="M:Ivi.Driver.SelfTestResult.op_Inequality(Ivi.Driver.SelfTestResult,Ivi.Driver.SelfTestResult)">
            <summary>
            Determines whether two <see cref="T:SelfTestResult"></see> instances do not have the same value.
            </summary>
            <param name="result1">A <see cref="T:SelfTestResult"></see> instance to compare with result2.</param>
            <param name="result2">A <see cref="T:SelfTestResult"></see> instance to compare with result1.</param>
            <returns>true if the two <see cref="T:SelfTestResult"></see> instances are not equal; otherwise, false. If either parameter is null, this method returns true.</returns>
        </member>
        <member name="P:Ivi.Driver.SelfTestResult.Code">
            <summary>
            The numeric result from the self test operation. 0 = no error (test passed).
            </summary>
        </member>
        <member name="P:Ivi.Driver.SelfTestResult.Message">
            <summary>
            The self test status message.
            </summary>
        </member>
        <member name="T:Ivi.Driver.TriggerSource">
            <summary>
            Standard values for trigger sources, events, and various other sources and sinks.
            </summary>
        </member>
        <member name="M:Ivi.Driver.TriggerSource.Equals(System.String,System.String)">
            <summary>
            Determines whether two strings represent the same trigger source. The comparison is case-insensitive 
            and considers all valid values for TriggerSource.None to be equal.
            </summary>
            <param name="value1">First string to compare.</param>
            <param name="value2">Second string to compare.</param>
            <returns>True if the strings represent the same trigger source.</returns>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.None">
            <summary>
            No interface (normally applies only to triggers)
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Immediate">
            <summary>
            Trigger immediately (normally applies only to triggers)
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.External">
            <summary>
            External source, not an interface (normally applies only to triggers)
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Internal">
            <summary>
            Internal source, not an interface  (normally applies only to triggers)
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Software">
            <summary>
            Software source, not an interface  (normally applies only to triggers)
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Get">
            <summary>
            Group Execute Trigger
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.ACLine">
            <summary>
            AC line interface
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Interval">
            <summary>
            Trigger at set intervals
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Lan0">
            <summary>
            LAN0 (LXI defined 'LAN0' LAN message)
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Lan1">
            <summary>
            LAN1 (LXI defined 'LAN1' LAN message)
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Lan2">
            <summary>
            LAN2 (LXI defined 'LAN2' LAN message)
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Lan3">
            <summary>
            LAN3 (LXI defined 'LAN3' LAN message)
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Lan4">
            <summary>
            LAN4 (LXI defined 'LAN4' LAN message)
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Lan5">
            <summary>
            LAN5 (LXI defined 'LAN5' LAN message)
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Lan6">
            <summary>
            LAN6 (LXI defined 'LAN6' LAN message)
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Lan7">
            <summary>
            LAN7 (LXI defined 'LAN7' LAN message)
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Lxi0">
            <summary>
            LXI Trigger Bus Line 0
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Lxi1">
            <summary>
            LXI Trigger Bus Line 1
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Lxi2">
            <summary>
            LXI Trigger Bus Line 2
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Lxi3">
            <summary>
            LXI Trigger Bus Line 3
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Lxi4">
            <summary>
            LXI Trigger Bus Line 4
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Lxi5">
            <summary>
            LXI Trigger Bus Line 5
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Lxi6">
            <summary>
            LXI Trigger Bus Line 6
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Lxi7">
            <summary>
            LXI Trigger Bus Line 7
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Ttl0">
            <summary>
            TTL Interface 0
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Ttl1">
            <summary>
            TTL Interface 1
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Ttl2">
            <summary>
            TTL Interface 2
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Ttl3">
            <summary>
            TTL Interface 3
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Ttl4">
            <summary>
            TTL Interface 4
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Ttl5">
            <summary>
            TTL Interface 5
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Ttl6">
            <summary>
            TTL Interface 6
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Ttl7">
            <summary>
            TTL Interface 7
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Ecl0">
            <summary>
            ECL Line 0
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Ecl1">
            <summary>
            ECL Line 1
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.PxiClk10">
            <summary>
            PXI 10MHz Clock Line
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.PxiStar">
            <summary>
            PXI Star Interface
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.PxiTrigger0">
            <summary>
            PXI Trigger Bus Line 0
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.PxiTrigger1">
            <summary>
            PXI Trigger Bus Line 1
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.PxiTrigger2">
            <summary>
            PXI Trigger Bus Line 2
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.PxiTrigger3">
            <summary>
            PXI Trigger Bus Line 3
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.PxiTrigger4">
            <summary>
            PXI Trigger Bus Line 4
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.PxiTrigger5">
            <summary>
            PXI Trigger Bus Line 5
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.PxiTrigger6">
            <summary>
            PXI Trigger Bus Line 6
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.PxiTrigger7">
            <summary>
            PXI Trigger Bus Line 7
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.PxiExpressClk100">
            <summary>
            PXI Express 100MHz Clock Line
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.PxiExpressDStarA">
            <summary>
            PXI Express DStar Line A
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.PxiExpressDStarB">
            <summary>
            PXI Express DStar Line B
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.PxiExpressDStarC">
            <summary>
            PXI Express DStar Line C
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Rtsi0">
            <summary>
            RTSI Bus Line 0
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Rtsi1">
            <summary>
            RTSI Bus Line 1
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Rtsi2">
            <summary>
            RTSI Bus Line 2
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Rtsi3">
            <summary>
            RTSI Bus Line 3
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Rtsi4">
            <summary>
            RTSI Bus Line 4
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Rtsi5">
            <summary>
            RTSI Bus Line 5
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Rtsi6">
            <summary>
            RTSI Bus Line 6
            </summary>
        </member>
        <member name="P:Ivi.Driver.TriggerSource.Rtsi7">
            <summary>
            RTSI Bus Line 7 (Clock)
            </summary>
        </member>
        <member name="T:Ivi.Driver.WarningEventArgs">
            <summary>
            Warning event arguments.
            </summary>
        </member>
        <member name="M:Ivi.Driver.WarningEventArgs.#ctor(System.Guid)">
            <summary>
            Constructor.
            </summary>
            <param name="code">Warning code.</param>
        </member>
        <member name="M:Ivi.Driver.WarningEventArgs.#ctor(System.Guid,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="code">Warning code.</param>
            <param name="text">Text description of the warning.</param>
        </member>
        <member name="P:Ivi.Driver.WarningEventArgs.Code">
            <summary>
            Warning code.
            </summary>
        </member>
        <member name="P:Ivi.Driver.WarningEventArgs.Text">
            <summary>
            Text description of the warning.
            </summary>
        </member>
        <member name="T:Ivi.Driver.IviDriverWarnings">
            <summary>
            Warning codes.
            </summary>
        </member>
        <member name="F:Ivi.Driver.IviDriverWarnings.IdQueryNotSupported">
            <summary>
            ID query operation not supported.
            </summary>
        </member>
        <member name="F:Ivi.Driver.IviDriverWarnings.SelfTestNotSupported">
            <summary>
            Self test operation not supported.
            </summary>
        </member>
        <member name="F:Ivi.Driver.IviDriverWarnings.ErrorQueryNotSupported">
            <summary>
            Error query operation not supported.
            </summary>
        </member>
        <member name="F:Ivi.Driver.IviDriverWarnings.RevisionQueryNotSupported">
            <summary>
            Revision query not supported.
            </summary>
        </member>
        <member name="T:Ivi.Driver.Waveform`1">
            <summary>
            The default implementation of the IVI.NET waveform class.
            </summary>
            <typeparam name="T">Int64, Int32, Int16, Byte, Single, or Double.</typeparam>
        </member>
        <member name="M:Ivi.Driver.Waveform`1.#ctor(Ivi.Driver.IWaveform{`0})">
            <summary>
            Initializes a new instance of the Ivi.Driver.Waveform class.  This constructor creates an empty waveform with implicit axis copied from another waveform.
            </summary>
            <param name="waveform">A waveform implementing the IWaveform interface to be copied</param>
        </member>
        <member name="M:Ivi.Driver.Waveform`1.#ctor(Ivi.Driver.PrecisionTimeSpan,Ivi.Driver.PrecisionTimeSpan,Ivi.Driver.PrecisionDateTime)">
            <summary>
            Initializes a new instance of the Ivi.Driver.Waveform class.  This constructor initializes an empty waveform. 
            </summary>
            <param name="startTime">The time of the first data point in the waveform relative to the trigger time.</param>
            <param name="intervalPerPoint">The amount of time between data points in the waveform (required).</param>
            <param name="triggerTime">The absolute time of the trigger in the waveform.</param>
        </member>
        <member name="M:Ivi.Driver.Waveform`1.#ctor(Ivi.Driver.PrecisionTimeSpan,Ivi.Driver.PrecisionTimeSpan)">
            <summary>
            Initializes a new instance of the Ivi.Driver.Waveform class.  This constructor initializes an empty waveform. 
            </summary>
            <param name="startTime">The time of the first data point in the waveform relative to the trigger time.</param>
            <param name="intervalPerPoint">The amount of time between data points in the waveform (required).</param>
        </member>
        <member name="M:Ivi.Driver.Waveform`1.#ctor(Ivi.Driver.PrecisionTimeSpan)">
            <summary>
            Initializes a new instance of the Ivi.Driver.Waveform class.  This constructor initializes an empty waveform. 
            </summary>
            <param name="intervalPerPoint">The amount of time between data points in the waveform (required).</param>
        </member>
        <member name="M:Ivi.Driver.Waveform`1.#ctor(Ivi.Driver.PrecisionTimeSpan,Ivi.Driver.PrecisionTimeSpan,Ivi.Driver.PrecisionDateTime,System.Int64)">
            <summary>
            Initializes a new instance of the Ivi.Driver.Waveform class.  This constructor initializes an empty waveform. 
            </summary>
            <param name="startTime">The time of the first data point in the waveform relative to the trigger time.</param>
            <param name="intervalPerPoint">The amount of time between data points in the waveform (required).</param>
            <param name="triggerTime">The absolute time of the trigger in the waveform.</param>
            <param name="capacity">The capacity of the of the waveform data array.</param>
        </member>
        <member name="M:Ivi.Driver.Waveform`1.#ctor(Ivi.Driver.PrecisionTimeSpan,Ivi.Driver.PrecisionTimeSpan,System.Int64)">
            <summary>
            Initializes a new instance of the Ivi.Driver.Waveform class.  This constructor initializes an empty waveform. 
            </summary>
            <param name="startTime">The time of the first data point in the waveform relative to the trigger time.</param>
            <param name="intervalPerPoint">The amount of time between data points in the waveform (required).</param>
            <param name="capacity">The capacity of the of the waveform data array.</param>
        </member>
        <member name="M:Ivi.Driver.Waveform`1.#ctor(Ivi.Driver.PrecisionTimeSpan,System.Int64)">
            <summary>
            Initializes a new instance of the Ivi.Driver.Waveform class.  This constructor initializes an empty waveform. 
            </summary>
            <param name="intervalPerPoint">The amount of time between data points in the waveform (required).</param>
            <param name="capacity">The capacity of the of the waveform data array.</param>
        </member>
        <member name="M:Ivi.Driver.Waveform`1.RescaleData(System.Double,System.Double)">
            <summary>
            RescaleData rebalances the resolution and dynamic range of integer IWaveforms by changing 
            the underlying data and setting IWaveform.Scale and IWaveform.Offset to the specified 
            values.  The data is changed in such a way that the voltages returned by the GetScaled 
            method are the same before and after RescaleData is called, within the limits of the 
            mathematical precision of the operation.
            </summary>
            <param name="newScale">The new Scale value.</param>
            <param name="newOffset">The new Offset value.</param>
            <returns>The number of new data values that were out of range when recalculated, and set 
            to T.MinValue or T.MaxValue as a result.</returns>
        </member>
        <member name="M:Ivi.Driver.Waveform`1.ScaleData(System.Double,System.Double)">
            <summary>
            Scale Data scales the waveform by applying a multiplier and adding an offset. 
            ScaleData is applicable to all types T supported by the Waveform class.
            For integer types, ScaleData modifies the values of the voltages in the waveform 
            by multiplying and applying an offset.  For floating point waveforms this modifies 
            each data element by multiplying by the multiplier and adding the offset.
            </summary>
            <param name="multiplier">The multiplier used to modify the waveform voltages.</param>
            <param name="offset">The offset to be added to the wavefrom voltages.</param>
            <returns>The number of new data values that were out of range when recalculated, 
            and set to T.MinValue or T.MaxValue as a result.</returns>
        </member>
        <member name="M:Ivi.Driver.Waveform`1.Configure(Ivi.Driver.PrecisionTimeSpan,Ivi.Driver.PrecisionTimeSpan,System.Int64,Ivi.Driver.PrecisionDateTime)">
            <summary>
            The Configure method defines the time (implicit) axis and number of data points in the waveform.  Because of
            the interaction between these values, they are set as a group with this method or when the waveform is
            initially created.  If startTime is not specified, it defaults to Zero.  If triggerTime is not specified,
            it defaults to Not A Time.  If validPointCount is not specified, the number of elements in the waveform is not changed.
            </summary>
            <param name="startTime">The time of the first data point in the waveform relative to the trigger time.</param>
            <param name="intervalPerPoint">The amount of time between data points in the waveform (required).</param>
            <param name="validPointCount">The actual number of elements in the waveform.</param>
            <param name="triggerTime">The time that this measurement was triggered.</param>
            <remarks>The Configure method does not change any of the explicit data in the Waveform.  The capacity of the waveform does
            not change as a side effect of the Configure method.  If the validPointCount exceeds the data array size, an
            Insufficient Capacity exception is thrown.
            </remarks>
        </member>
        <member name="M:Ivi.Driver.Waveform`1.Configure(Ivi.Driver.PrecisionTimeSpan,Ivi.Driver.PrecisionTimeSpan,System.Int64)">
            <summary>
            The Configure method defines the time (implicit) axis and number of data points in the waveform.  Because of
            the interaction between these values, they are set as a group with this method or when the waveform is
            initially created.  If startTime is not specified, it defaults to Zero.  If triggerTime is not specified,
            it defaults to Not A Time.  If validPointCount is not specified, the number of elements in the waveform is not changed.
            </summary>
            <param name="startTime">The time of the first data point in the waveform relative to the trigger time.</param>
            <param name="intervalPerPoint">The amount of time between data points in the waveform (required).</param>
            <param name="validPointCount">The actual number of elements in the waveform.</param>
            <remarks>The Configure method does not change any of the explicit data in the Waveform.  The capacity of the waveform does
            not change as a side effect of the Configure method.  If the validPointCount exceeds the data array size, an
            Insufficient Capacity exception is thrown.
            </remarks>
        </member>
        <member name="M:Ivi.Driver.Waveform`1.Configure(Ivi.Driver.PrecisionTimeSpan,Ivi.Driver.PrecisionTimeSpan)">
            <summary>
            The Configure method defines the time (implicit) axis and number of data points in the waveform.  Because of
            the interaction between these values, they are set as a group with this method or when the waveform is
            initially created.  If startTime is not specified, it defaults to Zero.  If triggerTime is not specified,
            it defaults to Not A Time.  If validPointCount is not specified, the number of elements in the waveform is not changed.
            </summary>
            <param name="startTime">The time of the first data point in the waveform relative to the trigger time.</param>
            <param name="intervalPerPoint">The amount of time between data points in the waveform (required).</param>
            <remarks>The Configure method does not change any of the explicit data in the Waveform.  The capacity of the waveform does
            not change as a side effect of the Configure method.  If the validPointCount exceeds the data array size, an
            Insufficient Capacity exception is thrown.
            </remarks>
        </member>
        <member name="M:Ivi.Driver.Waveform`1.Configure(Ivi.Driver.PrecisionTimeSpan,System.Int64)">
            <summary>
            The Configure method defines the time (implicit) axis and number of data points in the waveform.  Because of
            the interaction between these values, they are set as a group with this method or when the waveform is
            initially created.  If startTime is not specified, it defaults to Zero.  If triggerTime is not specified,
            it defaults to Not A Time.  If validPointCount is not specified, the number of elements in the waveform is not changed.
            </summary>
            <param name="intervalPerPoint">The amount of time between data points in the waveform (required).</param>
            <param name="validPointCount">The actual number of elements in the waveform.</param>
            <remarks>The Configure method does not change any of the explicit data in the Waveform.  The capacity of the waveform does
            not change as a side effect of the Configure method.  If the validPointCount exceeds the data array size, an
            Insufficient Capacity exception is thrown.
            </remarks>
        </member>
        <member name="M:Ivi.Driver.Waveform`1.Configure(Ivi.Driver.PrecisionTimeSpan)">
            <summary>
            The Configure method defines the time (implicit) axis and number of data points in the waveform.  Because of
            the interaction between these values, they are set as a group with this method or when the waveform is
            initially created.  If startTime is not specified, it defaults to Zero.  If triggerTime is not specified,
            it defaults to Not A Time.  If validPointCount is not specified, the number of elements in the waveform is not changed.
            </summary>
            <param name="intervalPerPoint">The amount of time between data points in the waveform (required).</param>
            <remarks>The Configure method does not change any of the explicit data in the Waveform.  The capacity of the waveform does
            not change as a side effect of the Configure method.  If the validPointCount exceeds the data array size, an
            Insufficient Capacity exception is thrown.
            </remarks>
        </member>
        <member name="M:Ivi.Driver.Waveform`1.Configure(Ivi.Driver.PrecisionTimeSpan,Ivi.Driver.PrecisionTimeSpan,Ivi.Driver.PrecisionDateTime)">
            <summary>
            The Configure method defines the time (implicit) axis and number of data points in the waveform.  Because of
            the interaction between these values, they are set as a group with this method or when the waveform is
            initially created.  If startTime is not specified, it defaults to Zero.  If triggerTime is not specified,
            it defaults to Not A Time.  If validPointCount is not specified, the number of elements in the waveform is not changed.
            </summary>
            <param name="startTime">The time of the first data point in the waveform relative to the trigger time.</param>
            <param name="intervalPerPoint">The amount of time between data points in the waveform (required).</param>
            <param name="triggerTime">The time that this measurement was triggered.</param>
            <remarks>The Configure method does not change any of the explicit data in the Waveform.  The capacity of the waveform does
            not change as a side effect of the Configure method.  If the validPointCount exceeds the data array size, an
            Insufficient Capacity exception is thrown.
            </remarks>
        </member>
        <member name="M:Ivi.Driver.Waveform`1.GetAllElements">
            <summary>
            GetAllElements returns a copy of the entire data array in the template data type.  Note that for scaled (that
            is, integer) types, the scaling must be applied to the returned data elements to convert them to physical
            values by the calling program.
            </summary>
            <returns>A copy of the entire data array in the template data type.</returns>
            <remarks>If the array is too large, this method will throw an Out Of Memory exception.</remarks>
        </member>
        <member name="M:Ivi.Driver.Waveform`1.GetElements(System.Int64,System.Int64)">
            <summary>
            GetElements returns a copy of a portion of the entire data array in the template data type, starting at the
            specified index and including the number of elements specified by count.  Note that for scaled (that
            is, integer) types, the scaling must be applied to the returned data elements to convert them to physical
            values by the calling program.
            </summary>
            <param name="index">The index in the Waveform that will be the first element in the returned array.  That is,
            element zero in the returned array is at this index in the Waveform.</param>
            <param name="count">The number of elements to be returned.</param>
            <returns>A copy of a portion of the entire data array in the template data type, starting at the specified
            index and including the number of elements specified by count.</returns>
        </member>
        <member name="M:Ivi.Driver.Waveform`1.GetScaled(System.Int64)">
            <summary>
            GetScaled returns one element of the data array as a Double.  If the internal data array is an integer, the
            scaling is applied to the returned value.
            </summary>
            <param name="index">The index of the data element to return.</param>
            <returns>One element of the data array as a Double.</returns>
        </member>
        <member name="M:Ivi.Driver.Waveform`1.GetScaled(System.Int64,System.Int64)">
            <summary>
            GetScaled returns all or part of the data array as a Double.  If the internal data array is an integer, the
            scaling is applied to the values in the returned array.
            </summary>
            <param name="index">The index of the first element in the array to return.</param>
            <param name="count">The number of data points to include in the returned array.</param>
            <returns>All or part of the data array as a Double.</returns>
        </member>
        <member name="M:Ivi.Driver.Waveform`1.PutElements(`0[])">
            <summary>
            PutElements sets all or part of the data array in a waveform, starting at the element specified by index, or
            (by default, if index is not used) at the beginning of the array.  index is the first element of the waveform
            data array to receive the new data.  If the array passed extends beyond the end of the Waveform, an
            ArgumentException will be thrown. The implicit axis of the waveform is not changed by PutElements.
            </summary>
            <param name="data">The data to be placed into the waveform array.</param>
        </member>
        <member name="M:Ivi.Driver.Waveform`1.PutElements(System.Int64,`0[])">
            <summary>
            PutElements sets all or part of the data array in a waveform, starting at the element specified by index, or
            (by default, if index is not used) at the beginning of the array.  index is the first element of the waveform
            data array to receive the new data.  If the array passed extends beyond the end of the Waveform, an ArgumentException
            will be thrown.  The implicit axis of the waveform is not changed by PutElements.
            </summary>
            <param name="index">The index of the first element of the data array to change.</param>
            <param name="data">The data to be placed into the waveform array.</param>
        </member>
        <member name="M:Ivi.Driver.Waveform`1.PutElements(System.Int64,System.ArraySegment{`0})">
            <summary>
            PutElements sets all or part of the data array in a waveform, starting at the element specified by index, or
            (by default, if index is not used) at the beginning of the array.  index is the first element of the waveform
            data array to receive the new data.  If the array passed extends beyond the end of the Waveform, only
            the elements up to the length of the waveform are copied.  The implicit axis of the waveform is not
            changed by PutElements.
            </summary>
            <param name="index">The index of the first element of the data array to change.</param>
            <param name="segment">The data to be placed into the waveform array.</param>
        </member>
        <member name="P:Ivi.Driver.Waveform`1.Data">
            <summary>
            A public, in-memory array containing elements of type T that contains the explicit waveform data.
            Clients can use the Data property to directly access the in-memory data without copying data.
            </summary>
            <remarks>Setting this property does not make a copy of the array specified.</remarks>
        </member>
        <member name="P:Ivi.Driver.Waveform`1.Item(System.Int64)">
            <summary>
            This returns the data element at the specified index in the waveform.  Note that for scaled (that is,
            integer) types, the scaling must be applied to the returned data element to convert it to a physical value
            by the calling program.
            </summary>
            <param name="index">The index of the data element to be returned from the waveform array.</param>
            <returns>The data element to be returned from the waveform array.</returns>
        </member>
        <member name="P:Ivi.Driver.Waveform`1.Capacity">
            <summary>
            The number of elements that the waveform array can store.  Use ValidPointCount to get the
            actual number of elements in this waveform.
            </summary>
        </member>
        <member name="P:Ivi.Driver.Waveform`1.ContainsInvalidElement">
            <summary>
            True if one or more points in the waveform array are not valid, otherwise false.
            </summary>
            <remarks>If the elements are composed of a floating point type, ContainsInvalidElement will be true if at least
            one element is set to NaN.  If the elements are not composed of floating point types,
            setting and reading ContainsInvalidElement will throw a Ivi.Driver.OperationNotSupportedException exception.
            </remarks>
        </member>
        <member name="P:Ivi.Driver.Waveform`1.ContainsOutOfRangeElement">
            <summary>
            True if one or more points in the waveform array are out of range.  Out of range values are too large or too
            small to represent.  Numbers that are too close to zero to represent are not considered out of range.
            </summary>
            <remarks>If the elements are composed of a floating point type, ContainsOutOfRangeElement will be true if at least
            one element is set to +Inf or -Inf.  If the elements are not composed of floating point
            types, setting and reading ContainsOutOfRangeElement will throw a Ivi.Driver.OperationNotSupportedException exception.
            </remarks>
        </member>
        <member name="P:Ivi.Driver.Waveform`1.EndTime">
            <summary>
            The time between the last valid data point in the waveform and the TriggerTime. Positive
            values of EndTime indicate that the End Time occurred after the trigger.
            This value is set by the Configure method.
            </summary>
        </member>
        <member name="P:Ivi.Driver.Waveform`1.FirstValidPoint">
            <summary>
            For waveforms that contain invalid padding data at the beginning of the data array, FirstValidPoint indicates
            the first element in the data array with valid data.  If there is no padding data at the beginning of the data
            array, FirstValidPoint will be zero.
            </summary>
        </member>
        <member name="P:Ivi.Driver.Waveform`1.IntervalPerPoint">
            <summary>
            The amount of time between data points in the data array.  This value is set by the Configure method.
            </summary>
        </member>
        <member name="P:Ivi.Driver.Waveform`1.Offset">
            <summary>
            The offset to apply to scale integer values.  To convert an integer data array element to a physical value
            first it is multiplied by the scale, and then the offset is added.  If the integers in the data array do
            not have an offset, the offset property is 0.  If the contents of the data array are floating point scalars,
            the offset property is set to 0.  If the contents of the data array are some other type, the use of the offset
            is dependent on that driver and data type.
            </summary>
        </member>
        <member name="P:Ivi.Driver.Waveform`1.Scale">
            <summary>
            The factor to apply to scale integer values.  To convert an integer data array element to a physical value
            the element is multiplied by scale, and then the offset is added.  If the integers in the data array do not
            have an offset, the scale property is set to 1.  If the contents of the data array are floating point
            scalars, the scale property is set to 1.  If the contents of the data array are some other type, the use of
            the scale is dependent on that driver and data type.
            </summary>
        </member>
        <member name="P:Ivi.Driver.Waveform`1.StartTime">
            <summary>
            The time between the first valid data point (that is the data point at index FirstValidPoint) in the waveform and the
            trigger.  Positive values indicate that the StartTime occurred after the trigger.
            This value is set by the Configure method.
            </summary>
        </member>
        <member name="P:Ivi.Driver.Waveform`1.TotalTime">
            <summary>
            The timespan represented by the waveform.  Numerically, it is equivalent to the end time minus the start
            time.  This value is set by the Configure method.
            </summary>
        </member>
        <member name="P:Ivi.Driver.Waveform`1.TriggerTime">
            <summary>
            The time that this measurement was triggered.   Note that this differs from Start Time in that the trigger
            may have occurred at some time other than when the first data point was captured, as in pre-trigger or
            post-trigger applications.    This value is set by the Configure method.
            </summary>
        </member>
        <member name="P:Ivi.Driver.Waveform`1.ValidPointCount">
            <summary>
            The actual number of elements in the waveform.  Use Capacity to get the number of elements
            that the waveform can store.
            </summary>
        </member>
    </members>
</doc>
